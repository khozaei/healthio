// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khozaei/healthio/ent/attachment"
	"github.com/khozaei/healthio/ent/patient"
	"github.com/khozaei/healthio/ent/predicate"
	"github.com/khozaei/healthio/ent/reception"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetFirstName sets the "first_name" field.
func (pu *PatientUpdate) SetFirstName(s string) *PatientUpdate {
	pu.mutation.SetFirstName(s)
	return pu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableFirstName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetFirstName(*s)
	}
	return pu
}

// ClearFirstName clears the value of the "first_name" field.
func (pu *PatientUpdate) ClearFirstName() *PatientUpdate {
	pu.mutation.ClearFirstName()
	return pu
}

// SetLastName sets the "last_name" field.
func (pu *PatientUpdate) SetLastName(s string) *PatientUpdate {
	pu.mutation.SetLastName(s)
	return pu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableLastName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetLastName(*s)
	}
	return pu
}

// ClearLastName clears the value of the "last_name" field.
func (pu *PatientUpdate) ClearLastName() *PatientUpdate {
	pu.mutation.ClearLastName()
	return pu
}

// SetFatherName sets the "father_name" field.
func (pu *PatientUpdate) SetFatherName(s string) *PatientUpdate {
	pu.mutation.SetFatherName(s)
	return pu
}

// SetNillableFatherName sets the "father_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableFatherName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetFatherName(*s)
	}
	return pu
}

// ClearFatherName clears the value of the "father_name" field.
func (pu *PatientUpdate) ClearFatherName() *PatientUpdate {
	pu.mutation.ClearFatherName()
	return pu
}

// SetPhone sets the "phone" field.
func (pu *PatientUpdate) SetPhone(s string) *PatientUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePhone(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// ClearPhone clears the value of the "phone" field.
func (pu *PatientUpdate) ClearPhone() *PatientUpdate {
	pu.mutation.ClearPhone()
	return pu
}

// SetNationalCode sets the "national_code" field.
func (pu *PatientUpdate) SetNationalCode(s string) *PatientUpdate {
	pu.mutation.SetNationalCode(s)
	return pu
}

// SetNillableNationalCode sets the "national_code" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableNationalCode(s *string) *PatientUpdate {
	if s != nil {
		pu.SetNationalCode(*s)
	}
	return pu
}

// ClearNationalCode clears the value of the "national_code" field.
func (pu *PatientUpdate) ClearNationalCode() *PatientUpdate {
	pu.mutation.ClearNationalCode()
	return pu
}

// SetIdentityCode sets the "identity_code" field.
func (pu *PatientUpdate) SetIdentityCode(s string) *PatientUpdate {
	pu.mutation.SetIdentityCode(s)
	return pu
}

// SetNillableIdentityCode sets the "identity_code" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableIdentityCode(s *string) *PatientUpdate {
	if s != nil {
		pu.SetIdentityCode(*s)
	}
	return pu
}

// ClearIdentityCode clears the value of the "identity_code" field.
func (pu *PatientUpdate) ClearIdentityCode() *PatientUpdate {
	pu.mutation.ClearIdentityCode()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PatientUpdate) SetUpdatedAt(t time.Time) *PatientUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableUpdatedAt(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *PatientUpdate) ClearUpdatedAt() *PatientUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PatientUpdate) SetDeletedAt(t time.Time) *PatientUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableDeletedAt(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PatientUpdate) ClearDeletedAt() *PatientUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// AddAttachmentIDs adds the "attachment" edge to the Attachment entity by IDs.
func (pu *PatientUpdate) AddAttachmentIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddAttachmentIDs(ids...)
	return pu
}

// AddAttachment adds the "attachment" edges to the Attachment entity.
func (pu *PatientUpdate) AddAttachment(a ...*Attachment) *PatientUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAttachmentIDs(ids...)
}

// AddReceptionIDs adds the "reception" edge to the Reception entity by IDs.
func (pu *PatientUpdate) AddReceptionIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddReceptionIDs(ids...)
	return pu
}

// AddReception adds the "reception" edges to the Reception entity.
func (pu *PatientUpdate) AddReception(r ...*Reception) *PatientUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReceptionIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// ClearAttachment clears all "attachment" edges to the Attachment entity.
func (pu *PatientUpdate) ClearAttachment() *PatientUpdate {
	pu.mutation.ClearAttachment()
	return pu
}

// RemoveAttachmentIDs removes the "attachment" edge to Attachment entities by IDs.
func (pu *PatientUpdate) RemoveAttachmentIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemoveAttachmentIDs(ids...)
	return pu
}

// RemoveAttachment removes "attachment" edges to Attachment entities.
func (pu *PatientUpdate) RemoveAttachment(a ...*Attachment) *PatientUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAttachmentIDs(ids...)
}

// ClearReception clears all "reception" edges to the Reception entity.
func (pu *PatientUpdate) ClearReception() *PatientUpdate {
	pu.mutation.ClearReception()
	return pu
}

// RemoveReceptionIDs removes the "reception" edge to Reception entities by IDs.
func (pu *PatientUpdate) RemoveReceptionIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemoveReceptionIDs(ids...)
	return pu
}

// RemoveReception removes "reception" edges to Reception entities.
func (pu *PatientUpdate) RemoveReception(r ...*Reception) *PatientUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReceptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.FirstName(); ok {
		_spec.SetField(patient.FieldFirstName, field.TypeString, value)
	}
	if pu.mutation.FirstNameCleared() {
		_spec.ClearField(patient.FieldFirstName, field.TypeString)
	}
	if value, ok := pu.mutation.LastName(); ok {
		_spec.SetField(patient.FieldLastName, field.TypeString, value)
	}
	if pu.mutation.LastNameCleared() {
		_spec.ClearField(patient.FieldLastName, field.TypeString)
	}
	if value, ok := pu.mutation.FatherName(); ok {
		_spec.SetField(patient.FieldFatherName, field.TypeString, value)
	}
	if pu.mutation.FatherNameCleared() {
		_spec.ClearField(patient.FieldFatherName, field.TypeString)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(patient.FieldPhone, field.TypeString, value)
	}
	if pu.mutation.PhoneCleared() {
		_spec.ClearField(patient.FieldPhone, field.TypeString)
	}
	if value, ok := pu.mutation.NationalCode(); ok {
		_spec.SetField(patient.FieldNationalCode, field.TypeString, value)
	}
	if pu.mutation.NationalCodeCleared() {
		_spec.ClearField(patient.FieldNationalCode, field.TypeString)
	}
	if value, ok := pu.mutation.IdentityCode(); ok {
		_spec.SetField(patient.FieldIdentityCode, field.TypeString, value)
	}
	if pu.mutation.IdentityCodeCleared() {
		_spec.ClearField(patient.FieldIdentityCode, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(patient.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(patient.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(patient.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(patient.FieldDeletedAt, field.TypeTime)
	}
	if pu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AttachmentTable,
			Columns: []string{patient.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAttachmentIDs(); len(nodes) > 0 && !pu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AttachmentTable,
			Columns: []string{patient.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AttachmentTable,
			Columns: []string{patient.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReceptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ReceptionTable,
			Columns: []string{patient.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReceptionIDs(); len(nodes) > 0 && !pu.mutation.ReceptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ReceptionTable,
			Columns: []string{patient.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReceptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ReceptionTable,
			Columns: []string{patient.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientMutation
}

// SetFirstName sets the "first_name" field.
func (puo *PatientUpdateOne) SetFirstName(s string) *PatientUpdateOne {
	puo.mutation.SetFirstName(s)
	return puo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableFirstName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetFirstName(*s)
	}
	return puo
}

// ClearFirstName clears the value of the "first_name" field.
func (puo *PatientUpdateOne) ClearFirstName() *PatientUpdateOne {
	puo.mutation.ClearFirstName()
	return puo
}

// SetLastName sets the "last_name" field.
func (puo *PatientUpdateOne) SetLastName(s string) *PatientUpdateOne {
	puo.mutation.SetLastName(s)
	return puo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableLastName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetLastName(*s)
	}
	return puo
}

// ClearLastName clears the value of the "last_name" field.
func (puo *PatientUpdateOne) ClearLastName() *PatientUpdateOne {
	puo.mutation.ClearLastName()
	return puo
}

// SetFatherName sets the "father_name" field.
func (puo *PatientUpdateOne) SetFatherName(s string) *PatientUpdateOne {
	puo.mutation.SetFatherName(s)
	return puo
}

// SetNillableFatherName sets the "father_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableFatherName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetFatherName(*s)
	}
	return puo
}

// ClearFatherName clears the value of the "father_name" field.
func (puo *PatientUpdateOne) ClearFatherName() *PatientUpdateOne {
	puo.mutation.ClearFatherName()
	return puo
}

// SetPhone sets the "phone" field.
func (puo *PatientUpdateOne) SetPhone(s string) *PatientUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePhone(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// ClearPhone clears the value of the "phone" field.
func (puo *PatientUpdateOne) ClearPhone() *PatientUpdateOne {
	puo.mutation.ClearPhone()
	return puo
}

// SetNationalCode sets the "national_code" field.
func (puo *PatientUpdateOne) SetNationalCode(s string) *PatientUpdateOne {
	puo.mutation.SetNationalCode(s)
	return puo
}

// SetNillableNationalCode sets the "national_code" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableNationalCode(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetNationalCode(*s)
	}
	return puo
}

// ClearNationalCode clears the value of the "national_code" field.
func (puo *PatientUpdateOne) ClearNationalCode() *PatientUpdateOne {
	puo.mutation.ClearNationalCode()
	return puo
}

// SetIdentityCode sets the "identity_code" field.
func (puo *PatientUpdateOne) SetIdentityCode(s string) *PatientUpdateOne {
	puo.mutation.SetIdentityCode(s)
	return puo
}

// SetNillableIdentityCode sets the "identity_code" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableIdentityCode(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetIdentityCode(*s)
	}
	return puo
}

// ClearIdentityCode clears the value of the "identity_code" field.
func (puo *PatientUpdateOne) ClearIdentityCode() *PatientUpdateOne {
	puo.mutation.ClearIdentityCode()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PatientUpdateOne) SetUpdatedAt(t time.Time) *PatientUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableUpdatedAt(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *PatientUpdateOne) ClearUpdatedAt() *PatientUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PatientUpdateOne) SetDeletedAt(t time.Time) *PatientUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableDeletedAt(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PatientUpdateOne) ClearDeletedAt() *PatientUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// AddAttachmentIDs adds the "attachment" edge to the Attachment entity by IDs.
func (puo *PatientUpdateOne) AddAttachmentIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddAttachmentIDs(ids...)
	return puo
}

// AddAttachment adds the "attachment" edges to the Attachment entity.
func (puo *PatientUpdateOne) AddAttachment(a ...*Attachment) *PatientUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAttachmentIDs(ids...)
}

// AddReceptionIDs adds the "reception" edge to the Reception entity by IDs.
func (puo *PatientUpdateOne) AddReceptionIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddReceptionIDs(ids...)
	return puo
}

// AddReception adds the "reception" edges to the Reception entity.
func (puo *PatientUpdateOne) AddReception(r ...*Reception) *PatientUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReceptionIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// ClearAttachment clears all "attachment" edges to the Attachment entity.
func (puo *PatientUpdateOne) ClearAttachment() *PatientUpdateOne {
	puo.mutation.ClearAttachment()
	return puo
}

// RemoveAttachmentIDs removes the "attachment" edge to Attachment entities by IDs.
func (puo *PatientUpdateOne) RemoveAttachmentIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemoveAttachmentIDs(ids...)
	return puo
}

// RemoveAttachment removes "attachment" edges to Attachment entities.
func (puo *PatientUpdateOne) RemoveAttachment(a ...*Attachment) *PatientUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAttachmentIDs(ids...)
}

// ClearReception clears all "reception" edges to the Reception entity.
func (puo *PatientUpdateOne) ClearReception() *PatientUpdateOne {
	puo.mutation.ClearReception()
	return puo
}

// RemoveReceptionIDs removes the "reception" edge to Reception entities by IDs.
func (puo *PatientUpdateOne) RemoveReceptionIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemoveReceptionIDs(ids...)
	return puo
}

// RemoveReception removes "reception" edges to Reception entities.
func (puo *PatientUpdateOne) RemoveReception(r ...*Reception) *PatientUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReceptionIDs(ids...)
}

// Where appends a list predicates to the PatientUpdate builder.
func (puo *PatientUpdateOne) Where(ps ...predicate.Patient) *PatientUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PatientUpdateOne) Select(field string, fields ...string) *PatientUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Patient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patient.FieldID)
		for _, f := range fields {
			if !patient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.FirstName(); ok {
		_spec.SetField(patient.FieldFirstName, field.TypeString, value)
	}
	if puo.mutation.FirstNameCleared() {
		_spec.ClearField(patient.FieldFirstName, field.TypeString)
	}
	if value, ok := puo.mutation.LastName(); ok {
		_spec.SetField(patient.FieldLastName, field.TypeString, value)
	}
	if puo.mutation.LastNameCleared() {
		_spec.ClearField(patient.FieldLastName, field.TypeString)
	}
	if value, ok := puo.mutation.FatherName(); ok {
		_spec.SetField(patient.FieldFatherName, field.TypeString, value)
	}
	if puo.mutation.FatherNameCleared() {
		_spec.ClearField(patient.FieldFatherName, field.TypeString)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(patient.FieldPhone, field.TypeString, value)
	}
	if puo.mutation.PhoneCleared() {
		_spec.ClearField(patient.FieldPhone, field.TypeString)
	}
	if value, ok := puo.mutation.NationalCode(); ok {
		_spec.SetField(patient.FieldNationalCode, field.TypeString, value)
	}
	if puo.mutation.NationalCodeCleared() {
		_spec.ClearField(patient.FieldNationalCode, field.TypeString)
	}
	if value, ok := puo.mutation.IdentityCode(); ok {
		_spec.SetField(patient.FieldIdentityCode, field.TypeString, value)
	}
	if puo.mutation.IdentityCodeCleared() {
		_spec.ClearField(patient.FieldIdentityCode, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(patient.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(patient.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(patient.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(patient.FieldDeletedAt, field.TypeTime)
	}
	if puo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AttachmentTable,
			Columns: []string{patient.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAttachmentIDs(); len(nodes) > 0 && !puo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AttachmentTable,
			Columns: []string{patient.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AttachmentTable,
			Columns: []string{patient.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReceptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ReceptionTable,
			Columns: []string{patient.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReceptionIDs(); len(nodes) > 0 && !puo.mutation.ReceptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ReceptionTable,
			Columns: []string{patient.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReceptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ReceptionTable,
			Columns: []string{patient.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
