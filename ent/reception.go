// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/khozaei/healthio/ent/patient"
	"github.com/khozaei/healthio/ent/reception"
)

// Reception is the model entity for the Reception schema.
type Reception struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReceptionFor holds the value of the "reception_for" field.
	ReceptionFor time.Time `json:"reception_for,omitempty"`
	// VisitDuration holds the value of the "visit_duration" field.
	VisitDuration int `json:"visit_duration,omitempty"`
	// InsuranceCode holds the value of the "insurance_code" field.
	InsuranceCode string `json:"insurance_code,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReceptionQuery when eager-loading is set.
	Edges             ReceptionEdges `json:"edges"`
	patient_reception *int
	selectValues      sql.SelectValues
}

// ReceptionEdges holds the relations/edges for other nodes in the graph.
type ReceptionEdges struct {
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// Visit holds the value of the visit edge.
	Visit []*Visit `json:"visit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceptionEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[0] {
		if e.Patient == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// VisitOrErr returns the Visit value or an error if the edge
// was not loaded in eager-loading.
func (e ReceptionEdges) VisitOrErr() ([]*Visit, error) {
	if e.loadedTypes[1] {
		return e.Visit, nil
	}
	return nil, &NotLoadedError{edge: "visit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reception) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reception.FieldID, reception.FieldVisitDuration:
			values[i] = new(sql.NullInt64)
		case reception.FieldInsuranceCode, reception.FieldDescription:
			values[i] = new(sql.NullString)
		case reception.FieldReceptionFor, reception.FieldCreatedAt, reception.FieldUpdatedAt, reception.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case reception.ForeignKeys[0]: // patient_reception
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reception fields.
func (r *Reception) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reception.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case reception.FieldReceptionFor:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reception_for", values[i])
			} else if value.Valid {
				r.ReceptionFor = value.Time
			}
		case reception.FieldVisitDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field visit_duration", values[i])
			} else if value.Valid {
				r.VisitDuration = int(value.Int64)
			}
		case reception.FieldInsuranceCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field insurance_code", values[i])
			} else if value.Valid {
				r.InsuranceCode = value.String
			}
		case reception.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case reception.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case reception.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case reception.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = value.Time
			}
		case reception.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field patient_reception", value)
			} else if value.Valid {
				r.patient_reception = new(int)
				*r.patient_reception = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reception.
// This includes values selected through modifiers, order, etc.
func (r *Reception) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryPatient queries the "patient" edge of the Reception entity.
func (r *Reception) QueryPatient() *PatientQuery {
	return NewReceptionClient(r.config).QueryPatient(r)
}

// QueryVisit queries the "visit" edge of the Reception entity.
func (r *Reception) QueryVisit() *VisitQuery {
	return NewReceptionClient(r.config).QueryVisit(r)
}

// Update returns a builder for updating this Reception.
// Note that you need to call Reception.Unwrap() before calling this method if this Reception
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reception) Update() *ReceptionUpdateOne {
	return NewReceptionClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reception entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reception) Unwrap() *Reception {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reception is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reception) String() string {
	var builder strings.Builder
	builder.WriteString("Reception(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("reception_for=")
	builder.WriteString(r.ReceptionFor.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("visit_duration=")
	builder.WriteString(fmt.Sprintf("%v", r.VisitDuration))
	builder.WriteString(", ")
	builder.WriteString("insurance_code=")
	builder.WriteString(r.InsuranceCode)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(r.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Receptions is a parsable slice of Reception.
type Receptions []*Reception
