// Code generated by ent, DO NOT EDIT.

package visit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/khozaei/healthio/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Visit {
	return predicate.Visit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Visit {
	return predicate.Visit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Visit {
	return predicate.Visit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Visit {
	return predicate.Visit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Visit {
	return predicate.Visit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Visit {
	return predicate.Visit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Visit {
	return predicate.Visit(sql.FieldLTE(FieldID, id))
}

// VisitPrice applies equality check predicate on the "visit_price" field. It's identical to VisitPriceEQ.
func VisitPrice(v string) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldVisitPrice, v))
}

// VisitedAt applies equality check predicate on the "visited_at" field. It's identical to VisitedAtEQ.
func VisitedAt(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldVisitedAt, v))
}

// PaymentType applies equality check predicate on the "payment_type" field. It's identical to PaymentTypeEQ.
func PaymentType(v string) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldPaymentType, v))
}

// IsPaid applies equality check predicate on the "is_paid" field. It's identical to IsPaidEQ.
func IsPaid(v bool) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldIsPaid, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldDeletedAt, v))
}

// VisitPriceEQ applies the EQ predicate on the "visit_price" field.
func VisitPriceEQ(v string) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldVisitPrice, v))
}

// VisitPriceNEQ applies the NEQ predicate on the "visit_price" field.
func VisitPriceNEQ(v string) predicate.Visit {
	return predicate.Visit(sql.FieldNEQ(FieldVisitPrice, v))
}

// VisitPriceIn applies the In predicate on the "visit_price" field.
func VisitPriceIn(vs ...string) predicate.Visit {
	return predicate.Visit(sql.FieldIn(FieldVisitPrice, vs...))
}

// VisitPriceNotIn applies the NotIn predicate on the "visit_price" field.
func VisitPriceNotIn(vs ...string) predicate.Visit {
	return predicate.Visit(sql.FieldNotIn(FieldVisitPrice, vs...))
}

// VisitPriceGT applies the GT predicate on the "visit_price" field.
func VisitPriceGT(v string) predicate.Visit {
	return predicate.Visit(sql.FieldGT(FieldVisitPrice, v))
}

// VisitPriceGTE applies the GTE predicate on the "visit_price" field.
func VisitPriceGTE(v string) predicate.Visit {
	return predicate.Visit(sql.FieldGTE(FieldVisitPrice, v))
}

// VisitPriceLT applies the LT predicate on the "visit_price" field.
func VisitPriceLT(v string) predicate.Visit {
	return predicate.Visit(sql.FieldLT(FieldVisitPrice, v))
}

// VisitPriceLTE applies the LTE predicate on the "visit_price" field.
func VisitPriceLTE(v string) predicate.Visit {
	return predicate.Visit(sql.FieldLTE(FieldVisitPrice, v))
}

// VisitPriceContains applies the Contains predicate on the "visit_price" field.
func VisitPriceContains(v string) predicate.Visit {
	return predicate.Visit(sql.FieldContains(FieldVisitPrice, v))
}

// VisitPriceHasPrefix applies the HasPrefix predicate on the "visit_price" field.
func VisitPriceHasPrefix(v string) predicate.Visit {
	return predicate.Visit(sql.FieldHasPrefix(FieldVisitPrice, v))
}

// VisitPriceHasSuffix applies the HasSuffix predicate on the "visit_price" field.
func VisitPriceHasSuffix(v string) predicate.Visit {
	return predicate.Visit(sql.FieldHasSuffix(FieldVisitPrice, v))
}

// VisitPriceIsNil applies the IsNil predicate on the "visit_price" field.
func VisitPriceIsNil() predicate.Visit {
	return predicate.Visit(sql.FieldIsNull(FieldVisitPrice))
}

// VisitPriceNotNil applies the NotNil predicate on the "visit_price" field.
func VisitPriceNotNil() predicate.Visit {
	return predicate.Visit(sql.FieldNotNull(FieldVisitPrice))
}

// VisitPriceEqualFold applies the EqualFold predicate on the "visit_price" field.
func VisitPriceEqualFold(v string) predicate.Visit {
	return predicate.Visit(sql.FieldEqualFold(FieldVisitPrice, v))
}

// VisitPriceContainsFold applies the ContainsFold predicate on the "visit_price" field.
func VisitPriceContainsFold(v string) predicate.Visit {
	return predicate.Visit(sql.FieldContainsFold(FieldVisitPrice, v))
}

// VisitedAtEQ applies the EQ predicate on the "visited_at" field.
func VisitedAtEQ(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldVisitedAt, v))
}

// VisitedAtNEQ applies the NEQ predicate on the "visited_at" field.
func VisitedAtNEQ(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldNEQ(FieldVisitedAt, v))
}

// VisitedAtIn applies the In predicate on the "visited_at" field.
func VisitedAtIn(vs ...time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldIn(FieldVisitedAt, vs...))
}

// VisitedAtNotIn applies the NotIn predicate on the "visited_at" field.
func VisitedAtNotIn(vs ...time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldNotIn(FieldVisitedAt, vs...))
}

// VisitedAtGT applies the GT predicate on the "visited_at" field.
func VisitedAtGT(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldGT(FieldVisitedAt, v))
}

// VisitedAtGTE applies the GTE predicate on the "visited_at" field.
func VisitedAtGTE(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldGTE(FieldVisitedAt, v))
}

// VisitedAtLT applies the LT predicate on the "visited_at" field.
func VisitedAtLT(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldLT(FieldVisitedAt, v))
}

// VisitedAtLTE applies the LTE predicate on the "visited_at" field.
func VisitedAtLTE(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldLTE(FieldVisitedAt, v))
}

// VisitedAtIsNil applies the IsNil predicate on the "visited_at" field.
func VisitedAtIsNil() predicate.Visit {
	return predicate.Visit(sql.FieldIsNull(FieldVisitedAt))
}

// VisitedAtNotNil applies the NotNil predicate on the "visited_at" field.
func VisitedAtNotNil() predicate.Visit {
	return predicate.Visit(sql.FieldNotNull(FieldVisitedAt))
}

// PaymentTypeEQ applies the EQ predicate on the "payment_type" field.
func PaymentTypeEQ(v string) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldPaymentType, v))
}

// PaymentTypeNEQ applies the NEQ predicate on the "payment_type" field.
func PaymentTypeNEQ(v string) predicate.Visit {
	return predicate.Visit(sql.FieldNEQ(FieldPaymentType, v))
}

// PaymentTypeIn applies the In predicate on the "payment_type" field.
func PaymentTypeIn(vs ...string) predicate.Visit {
	return predicate.Visit(sql.FieldIn(FieldPaymentType, vs...))
}

// PaymentTypeNotIn applies the NotIn predicate on the "payment_type" field.
func PaymentTypeNotIn(vs ...string) predicate.Visit {
	return predicate.Visit(sql.FieldNotIn(FieldPaymentType, vs...))
}

// PaymentTypeGT applies the GT predicate on the "payment_type" field.
func PaymentTypeGT(v string) predicate.Visit {
	return predicate.Visit(sql.FieldGT(FieldPaymentType, v))
}

// PaymentTypeGTE applies the GTE predicate on the "payment_type" field.
func PaymentTypeGTE(v string) predicate.Visit {
	return predicate.Visit(sql.FieldGTE(FieldPaymentType, v))
}

// PaymentTypeLT applies the LT predicate on the "payment_type" field.
func PaymentTypeLT(v string) predicate.Visit {
	return predicate.Visit(sql.FieldLT(FieldPaymentType, v))
}

// PaymentTypeLTE applies the LTE predicate on the "payment_type" field.
func PaymentTypeLTE(v string) predicate.Visit {
	return predicate.Visit(sql.FieldLTE(FieldPaymentType, v))
}

// PaymentTypeContains applies the Contains predicate on the "payment_type" field.
func PaymentTypeContains(v string) predicate.Visit {
	return predicate.Visit(sql.FieldContains(FieldPaymentType, v))
}

// PaymentTypeHasPrefix applies the HasPrefix predicate on the "payment_type" field.
func PaymentTypeHasPrefix(v string) predicate.Visit {
	return predicate.Visit(sql.FieldHasPrefix(FieldPaymentType, v))
}

// PaymentTypeHasSuffix applies the HasSuffix predicate on the "payment_type" field.
func PaymentTypeHasSuffix(v string) predicate.Visit {
	return predicate.Visit(sql.FieldHasSuffix(FieldPaymentType, v))
}

// PaymentTypeIsNil applies the IsNil predicate on the "payment_type" field.
func PaymentTypeIsNil() predicate.Visit {
	return predicate.Visit(sql.FieldIsNull(FieldPaymentType))
}

// PaymentTypeNotNil applies the NotNil predicate on the "payment_type" field.
func PaymentTypeNotNil() predicate.Visit {
	return predicate.Visit(sql.FieldNotNull(FieldPaymentType))
}

// PaymentTypeEqualFold applies the EqualFold predicate on the "payment_type" field.
func PaymentTypeEqualFold(v string) predicate.Visit {
	return predicate.Visit(sql.FieldEqualFold(FieldPaymentType, v))
}

// PaymentTypeContainsFold applies the ContainsFold predicate on the "payment_type" field.
func PaymentTypeContainsFold(v string) predicate.Visit {
	return predicate.Visit(sql.FieldContainsFold(FieldPaymentType, v))
}

// IsPaidEQ applies the EQ predicate on the "is_paid" field.
func IsPaidEQ(v bool) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldIsPaid, v))
}

// IsPaidNEQ applies the NEQ predicate on the "is_paid" field.
func IsPaidNEQ(v bool) predicate.Visit {
	return predicate.Visit(sql.FieldNEQ(FieldIsPaid, v))
}

// IsPaidIsNil applies the IsNil predicate on the "is_paid" field.
func IsPaidIsNil() predicate.Visit {
	return predicate.Visit(sql.FieldIsNull(FieldIsPaid))
}

// IsPaidNotNil applies the NotNil predicate on the "is_paid" field.
func IsPaidNotNil() predicate.Visit {
	return predicate.Visit(sql.FieldNotNull(FieldIsPaid))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Visit {
	return predicate.Visit(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Visit {
	return predicate.Visit(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Visit {
	return predicate.Visit(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Visit {
	return predicate.Visit(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Visit {
	return predicate.Visit(sql.FieldNotNull(FieldDeletedAt))
}

// HasReception applies the HasEdge predicate on the "reception" edge.
func HasReception() predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReceptionTable, ReceptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceptionWith applies the HasEdge predicate on the "reception" edge with a given conditions (other predicates).
func HasReceptionWith(preds ...predicate.Reception) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		step := newReceptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachment applies the HasEdge predicate on the "attachment" edge.
func HasAttachment() predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentTable, AttachmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentWith applies the HasEdge predicate on the "attachment" edge with a given conditions (other predicates).
func HasAttachmentWith(preds ...predicate.Attachment) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		step := newAttachmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		p(s.Not())
	})
}
