// Code generated by ent, DO NOT EDIT.

package visit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the visit type in the database.
	Label = "visit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVisitPrice holds the string denoting the visit_price field in the database.
	FieldVisitPrice = "visit_price"
	// FieldVisitedAt holds the string denoting the visited_at field in the database.
	FieldVisitedAt = "visited_at"
	// FieldPaymentType holds the string denoting the payment_type field in the database.
	FieldPaymentType = "payment_type"
	// FieldIsPaid holds the string denoting the is_paid field in the database.
	FieldIsPaid = "is_paid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeReception holds the string denoting the reception edge name in mutations.
	EdgeReception = "reception"
	// EdgeAttachment holds the string denoting the attachment edge name in mutations.
	EdgeAttachment = "attachment"
	// Table holds the table name of the visit in the database.
	Table = "visits"
	// ReceptionTable is the table that holds the reception relation/edge.
	ReceptionTable = "visits"
	// ReceptionInverseTable is the table name for the Reception entity.
	// It exists in this package in order to avoid circular dependency with the "reception" package.
	ReceptionInverseTable = "receptions"
	// ReceptionColumn is the table column denoting the reception relation/edge.
	ReceptionColumn = "reception_visit"
	// AttachmentTable is the table that holds the attachment relation/edge.
	AttachmentTable = "attachments"
	// AttachmentInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentInverseTable = "attachments"
	// AttachmentColumn is the table column denoting the attachment relation/edge.
	AttachmentColumn = "visit_attachment"
)

// Columns holds all SQL columns for visit fields.
var Columns = []string{
	FieldID,
	FieldVisitPrice,
	FieldVisitedAt,
	FieldPaymentType,
	FieldIsPaid,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "visits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"reception_visit",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Visit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVisitPrice orders the results by the visit_price field.
func ByVisitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisitPrice, opts...).ToFunc()
}

// ByVisitedAt orders the results by the visited_at field.
func ByVisitedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisitedAt, opts...).ToFunc()
}

// ByPaymentType orders the results by the payment_type field.
func ByPaymentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentType, opts...).ToFunc()
}

// ByIsPaid orders the results by the is_paid field.
func ByIsPaid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPaid, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByReceptionField orders the results by reception field.
func ByReceptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByAttachmentCount orders the results by attachment count.
func ByAttachmentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttachmentStep(), opts...)
	}
}

// ByAttachment orders the results by attachment terms.
func ByAttachment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttachmentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newReceptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReceptionTable, ReceptionColumn),
	)
}
func newAttachmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttachmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttachmentTable, AttachmentColumn),
	)
}
