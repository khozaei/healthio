// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khozaei/healthio/ent/patient"
	"github.com/khozaei/healthio/ent/reception"
	"github.com/khozaei/healthio/ent/visit"
)

// ReceptionCreate is the builder for creating a Reception entity.
type ReceptionCreate struct {
	config
	mutation *ReceptionMutation
	hooks    []Hook
}

// SetReceptionFor sets the "reception_for" field.
func (rc *ReceptionCreate) SetReceptionFor(t time.Time) *ReceptionCreate {
	rc.mutation.SetReceptionFor(t)
	return rc
}

// SetVisitDuration sets the "visit_duration" field.
func (rc *ReceptionCreate) SetVisitDuration(i int) *ReceptionCreate {
	rc.mutation.SetVisitDuration(i)
	return rc
}

// SetInsuranceCode sets the "insurance_code" field.
func (rc *ReceptionCreate) SetInsuranceCode(s string) *ReceptionCreate {
	rc.mutation.SetInsuranceCode(s)
	return rc
}

// SetNillableInsuranceCode sets the "insurance_code" field if the given value is not nil.
func (rc *ReceptionCreate) SetNillableInsuranceCode(s *string) *ReceptionCreate {
	if s != nil {
		rc.SetInsuranceCode(*s)
	}
	return rc
}

// SetDescription sets the "description" field.
func (rc *ReceptionCreate) SetDescription(s string) *ReceptionCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *ReceptionCreate) SetNillableDescription(s *string) *ReceptionCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReceptionCreate) SetCreatedAt(t time.Time) *ReceptionCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReceptionCreate) SetNillableCreatedAt(t *time.Time) *ReceptionCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReceptionCreate) SetUpdatedAt(t time.Time) *ReceptionCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReceptionCreate) SetNillableUpdatedAt(t *time.Time) *ReceptionCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *ReceptionCreate) SetDeletedAt(t time.Time) *ReceptionCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *ReceptionCreate) SetNillableDeletedAt(t *time.Time) *ReceptionCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (rc *ReceptionCreate) SetPatientID(id int) *ReceptionCreate {
	rc.mutation.SetPatientID(id)
	return rc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (rc *ReceptionCreate) SetNillablePatientID(id *int) *ReceptionCreate {
	if id != nil {
		rc = rc.SetPatientID(*id)
	}
	return rc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (rc *ReceptionCreate) SetPatient(p *Patient) *ReceptionCreate {
	return rc.SetPatientID(p.ID)
}

// AddVisitIDs adds the "visit" edge to the Visit entity by IDs.
func (rc *ReceptionCreate) AddVisitIDs(ids ...int) *ReceptionCreate {
	rc.mutation.AddVisitIDs(ids...)
	return rc
}

// AddVisit adds the "visit" edges to the Visit entity.
func (rc *ReceptionCreate) AddVisit(v ...*Visit) *ReceptionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return rc.AddVisitIDs(ids...)
}

// Mutation returns the ReceptionMutation object of the builder.
func (rc *ReceptionCreate) Mutation() *ReceptionMutation {
	return rc.mutation
}

// Save creates the Reception in the database.
func (rc *ReceptionCreate) Save(ctx context.Context) (*Reception, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReceptionCreate) SaveX(ctx context.Context) *Reception {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReceptionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReceptionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReceptionCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reception.DefaultCreatedAt
		rc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReceptionCreate) check() error {
	if _, ok := rc.mutation.ReceptionFor(); !ok {
		return &ValidationError{Name: "reception_for", err: errors.New(`ent: missing required field "Reception.reception_for"`)}
	}
	if _, ok := rc.mutation.VisitDuration(); !ok {
		return &ValidationError{Name: "visit_duration", err: errors.New(`ent: missing required field "Reception.visit_duration"`)}
	}
	if v, ok := rc.mutation.VisitDuration(); ok {
		if err := reception.VisitDurationValidator(v); err != nil {
			return &ValidationError{Name: "visit_duration", err: fmt.Errorf(`ent: validator failed for field "Reception.visit_duration": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reception.created_at"`)}
	}
	return nil
}

func (rc *ReceptionCreate) sqlSave(ctx context.Context) (*Reception, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReceptionCreate) createSpec() (*Reception, *sqlgraph.CreateSpec) {
	var (
		_node = &Reception{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reception.Table, sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.ReceptionFor(); ok {
		_spec.SetField(reception.FieldReceptionFor, field.TypeTime, value)
		_node.ReceptionFor = value
	}
	if value, ok := rc.mutation.VisitDuration(); ok {
		_spec.SetField(reception.FieldVisitDuration, field.TypeInt, value)
		_node.VisitDuration = value
	}
	if value, ok := rc.mutation.InsuranceCode(); ok {
		_spec.SetField(reception.FieldInsuranceCode, field.TypeString, value)
		_node.InsuranceCode = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(reception.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reception.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reception.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(reception.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := rc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reception.PatientTable,
			Columns: []string{reception.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.patient_reception = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.VisitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reception.VisitTable,
			Columns: []string{reception.VisitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReceptionCreateBulk is the builder for creating many Reception entities in bulk.
type ReceptionCreateBulk struct {
	config
	builders []*ReceptionCreate
}

// Save creates the Reception entities in the database.
func (rcb *ReceptionCreateBulk) Save(ctx context.Context) ([]*Reception, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reception, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReceptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReceptionCreateBulk) SaveX(ctx context.Context) []*Reception {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReceptionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReceptionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
