// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khozaei/healthio/ent/attachment"
	"github.com/khozaei/healthio/ent/predicate"
	"github.com/khozaei/healthio/ent/reception"
	"github.com/khozaei/healthio/ent/visit"
)

// VisitUpdate is the builder for updating Visit entities.
type VisitUpdate struct {
	config
	hooks    []Hook
	mutation *VisitMutation
}

// Where appends a list predicates to the VisitUpdate builder.
func (vu *VisitUpdate) Where(ps ...predicate.Visit) *VisitUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVisitPrice sets the "visit_price" field.
func (vu *VisitUpdate) SetVisitPrice(s string) *VisitUpdate {
	vu.mutation.SetVisitPrice(s)
	return vu
}

// SetNillableVisitPrice sets the "visit_price" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableVisitPrice(s *string) *VisitUpdate {
	if s != nil {
		vu.SetVisitPrice(*s)
	}
	return vu
}

// ClearVisitPrice clears the value of the "visit_price" field.
func (vu *VisitUpdate) ClearVisitPrice() *VisitUpdate {
	vu.mutation.ClearVisitPrice()
	return vu
}

// SetVisitedAt sets the "visited_at" field.
func (vu *VisitUpdate) SetVisitedAt(t time.Time) *VisitUpdate {
	vu.mutation.SetVisitedAt(t)
	return vu
}

// SetNillableVisitedAt sets the "visited_at" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableVisitedAt(t *time.Time) *VisitUpdate {
	if t != nil {
		vu.SetVisitedAt(*t)
	}
	return vu
}

// ClearVisitedAt clears the value of the "visited_at" field.
func (vu *VisitUpdate) ClearVisitedAt() *VisitUpdate {
	vu.mutation.ClearVisitedAt()
	return vu
}

// SetPaymentType sets the "payment_type" field.
func (vu *VisitUpdate) SetPaymentType(s string) *VisitUpdate {
	vu.mutation.SetPaymentType(s)
	return vu
}

// SetNillablePaymentType sets the "payment_type" field if the given value is not nil.
func (vu *VisitUpdate) SetNillablePaymentType(s *string) *VisitUpdate {
	if s != nil {
		vu.SetPaymentType(*s)
	}
	return vu
}

// ClearPaymentType clears the value of the "payment_type" field.
func (vu *VisitUpdate) ClearPaymentType() *VisitUpdate {
	vu.mutation.ClearPaymentType()
	return vu
}

// SetIsPaid sets the "is_paid" field.
func (vu *VisitUpdate) SetIsPaid(b bool) *VisitUpdate {
	vu.mutation.SetIsPaid(b)
	return vu
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableIsPaid(b *bool) *VisitUpdate {
	if b != nil {
		vu.SetIsPaid(*b)
	}
	return vu
}

// ClearIsPaid clears the value of the "is_paid" field.
func (vu *VisitUpdate) ClearIsPaid() *VisitUpdate {
	vu.mutation.ClearIsPaid()
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VisitUpdate) SetCreatedAt(t time.Time) *VisitUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableCreatedAt(t *time.Time) *VisitUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VisitUpdate) SetUpdatedAt(t time.Time) *VisitUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableUpdatedAt(t *time.Time) *VisitUpdate {
	if t != nil {
		vu.SetUpdatedAt(*t)
	}
	return vu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vu *VisitUpdate) ClearUpdatedAt() *VisitUpdate {
	vu.mutation.ClearUpdatedAt()
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VisitUpdate) SetDeletedAt(t time.Time) *VisitUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableDeletedAt(t *time.Time) *VisitUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VisitUpdate) ClearDeletedAt() *VisitUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetReceptionID sets the "reception" edge to the Reception entity by ID.
func (vu *VisitUpdate) SetReceptionID(id int) *VisitUpdate {
	vu.mutation.SetReceptionID(id)
	return vu
}

// SetNillableReceptionID sets the "reception" edge to the Reception entity by ID if the given value is not nil.
func (vu *VisitUpdate) SetNillableReceptionID(id *int) *VisitUpdate {
	if id != nil {
		vu = vu.SetReceptionID(*id)
	}
	return vu
}

// SetReception sets the "reception" edge to the Reception entity.
func (vu *VisitUpdate) SetReception(r *Reception) *VisitUpdate {
	return vu.SetReceptionID(r.ID)
}

// AddAttachmentIDs adds the "attachment" edge to the Attachment entity by IDs.
func (vu *VisitUpdate) AddAttachmentIDs(ids ...int) *VisitUpdate {
	vu.mutation.AddAttachmentIDs(ids...)
	return vu
}

// AddAttachment adds the "attachment" edges to the Attachment entity.
func (vu *VisitUpdate) AddAttachment(a ...*Attachment) *VisitUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.AddAttachmentIDs(ids...)
}

// Mutation returns the VisitMutation object of the builder.
func (vu *VisitUpdate) Mutation() *VisitMutation {
	return vu.mutation
}

// ClearReception clears the "reception" edge to the Reception entity.
func (vu *VisitUpdate) ClearReception() *VisitUpdate {
	vu.mutation.ClearReception()
	return vu
}

// ClearAttachment clears all "attachment" edges to the Attachment entity.
func (vu *VisitUpdate) ClearAttachment() *VisitUpdate {
	vu.mutation.ClearAttachment()
	return vu
}

// RemoveAttachmentIDs removes the "attachment" edge to Attachment entities by IDs.
func (vu *VisitUpdate) RemoveAttachmentIDs(ids ...int) *VisitUpdate {
	vu.mutation.RemoveAttachmentIDs(ids...)
	return vu
}

// RemoveAttachment removes "attachment" edges to Attachment entities.
func (vu *VisitUpdate) RemoveAttachment(a ...*Attachment) *VisitUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.RemoveAttachmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VisitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VisitUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VisitUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VisitUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VisitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(visit.Table, visit.Columns, sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.VisitPrice(); ok {
		_spec.SetField(visit.FieldVisitPrice, field.TypeString, value)
	}
	if vu.mutation.VisitPriceCleared() {
		_spec.ClearField(visit.FieldVisitPrice, field.TypeString)
	}
	if value, ok := vu.mutation.VisitedAt(); ok {
		_spec.SetField(visit.FieldVisitedAt, field.TypeTime, value)
	}
	if vu.mutation.VisitedAtCleared() {
		_spec.ClearField(visit.FieldVisitedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.PaymentType(); ok {
		_spec.SetField(visit.FieldPaymentType, field.TypeString, value)
	}
	if vu.mutation.PaymentTypeCleared() {
		_spec.ClearField(visit.FieldPaymentType, field.TypeString)
	}
	if value, ok := vu.mutation.IsPaid(); ok {
		_spec.SetField(visit.FieldIsPaid, field.TypeBool, value)
	}
	if vu.mutation.IsPaidCleared() {
		_spec.ClearField(visit.FieldIsPaid, field.TypeBool)
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(visit.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(visit.FieldUpdatedAt, field.TypeTime, value)
	}
	if vu.mutation.UpdatedAtCleared() {
		_spec.ClearField(visit.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(visit.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(visit.FieldDeletedAt, field.TypeTime)
	}
	if vu.mutation.ReceptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.ReceptionTable,
			Columns: []string{visit.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ReceptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.ReceptionTable,
			Columns: []string{visit.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visit.AttachmentTable,
			Columns: []string{visit.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedAttachmentIDs(); len(nodes) > 0 && !vu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visit.AttachmentTable,
			Columns: []string{visit.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visit.AttachmentTable,
			Columns: []string{visit.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VisitUpdateOne is the builder for updating a single Visit entity.
type VisitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VisitMutation
}

// SetVisitPrice sets the "visit_price" field.
func (vuo *VisitUpdateOne) SetVisitPrice(s string) *VisitUpdateOne {
	vuo.mutation.SetVisitPrice(s)
	return vuo
}

// SetNillableVisitPrice sets the "visit_price" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableVisitPrice(s *string) *VisitUpdateOne {
	if s != nil {
		vuo.SetVisitPrice(*s)
	}
	return vuo
}

// ClearVisitPrice clears the value of the "visit_price" field.
func (vuo *VisitUpdateOne) ClearVisitPrice() *VisitUpdateOne {
	vuo.mutation.ClearVisitPrice()
	return vuo
}

// SetVisitedAt sets the "visited_at" field.
func (vuo *VisitUpdateOne) SetVisitedAt(t time.Time) *VisitUpdateOne {
	vuo.mutation.SetVisitedAt(t)
	return vuo
}

// SetNillableVisitedAt sets the "visited_at" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableVisitedAt(t *time.Time) *VisitUpdateOne {
	if t != nil {
		vuo.SetVisitedAt(*t)
	}
	return vuo
}

// ClearVisitedAt clears the value of the "visited_at" field.
func (vuo *VisitUpdateOne) ClearVisitedAt() *VisitUpdateOne {
	vuo.mutation.ClearVisitedAt()
	return vuo
}

// SetPaymentType sets the "payment_type" field.
func (vuo *VisitUpdateOne) SetPaymentType(s string) *VisitUpdateOne {
	vuo.mutation.SetPaymentType(s)
	return vuo
}

// SetNillablePaymentType sets the "payment_type" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillablePaymentType(s *string) *VisitUpdateOne {
	if s != nil {
		vuo.SetPaymentType(*s)
	}
	return vuo
}

// ClearPaymentType clears the value of the "payment_type" field.
func (vuo *VisitUpdateOne) ClearPaymentType() *VisitUpdateOne {
	vuo.mutation.ClearPaymentType()
	return vuo
}

// SetIsPaid sets the "is_paid" field.
func (vuo *VisitUpdateOne) SetIsPaid(b bool) *VisitUpdateOne {
	vuo.mutation.SetIsPaid(b)
	return vuo
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableIsPaid(b *bool) *VisitUpdateOne {
	if b != nil {
		vuo.SetIsPaid(*b)
	}
	return vuo
}

// ClearIsPaid clears the value of the "is_paid" field.
func (vuo *VisitUpdateOne) ClearIsPaid() *VisitUpdateOne {
	vuo.mutation.ClearIsPaid()
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VisitUpdateOne) SetCreatedAt(t time.Time) *VisitUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableCreatedAt(t *time.Time) *VisitUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VisitUpdateOne) SetUpdatedAt(t time.Time) *VisitUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableUpdatedAt(t *time.Time) *VisitUpdateOne {
	if t != nil {
		vuo.SetUpdatedAt(*t)
	}
	return vuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vuo *VisitUpdateOne) ClearUpdatedAt() *VisitUpdateOne {
	vuo.mutation.ClearUpdatedAt()
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VisitUpdateOne) SetDeletedAt(t time.Time) *VisitUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableDeletedAt(t *time.Time) *VisitUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VisitUpdateOne) ClearDeletedAt() *VisitUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetReceptionID sets the "reception" edge to the Reception entity by ID.
func (vuo *VisitUpdateOne) SetReceptionID(id int) *VisitUpdateOne {
	vuo.mutation.SetReceptionID(id)
	return vuo
}

// SetNillableReceptionID sets the "reception" edge to the Reception entity by ID if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableReceptionID(id *int) *VisitUpdateOne {
	if id != nil {
		vuo = vuo.SetReceptionID(*id)
	}
	return vuo
}

// SetReception sets the "reception" edge to the Reception entity.
func (vuo *VisitUpdateOne) SetReception(r *Reception) *VisitUpdateOne {
	return vuo.SetReceptionID(r.ID)
}

// AddAttachmentIDs adds the "attachment" edge to the Attachment entity by IDs.
func (vuo *VisitUpdateOne) AddAttachmentIDs(ids ...int) *VisitUpdateOne {
	vuo.mutation.AddAttachmentIDs(ids...)
	return vuo
}

// AddAttachment adds the "attachment" edges to the Attachment entity.
func (vuo *VisitUpdateOne) AddAttachment(a ...*Attachment) *VisitUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.AddAttachmentIDs(ids...)
}

// Mutation returns the VisitMutation object of the builder.
func (vuo *VisitUpdateOne) Mutation() *VisitMutation {
	return vuo.mutation
}

// ClearReception clears the "reception" edge to the Reception entity.
func (vuo *VisitUpdateOne) ClearReception() *VisitUpdateOne {
	vuo.mutation.ClearReception()
	return vuo
}

// ClearAttachment clears all "attachment" edges to the Attachment entity.
func (vuo *VisitUpdateOne) ClearAttachment() *VisitUpdateOne {
	vuo.mutation.ClearAttachment()
	return vuo
}

// RemoveAttachmentIDs removes the "attachment" edge to Attachment entities by IDs.
func (vuo *VisitUpdateOne) RemoveAttachmentIDs(ids ...int) *VisitUpdateOne {
	vuo.mutation.RemoveAttachmentIDs(ids...)
	return vuo
}

// RemoveAttachment removes "attachment" edges to Attachment entities.
func (vuo *VisitUpdateOne) RemoveAttachment(a ...*Attachment) *VisitUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.RemoveAttachmentIDs(ids...)
}

// Where appends a list predicates to the VisitUpdate builder.
func (vuo *VisitUpdateOne) Where(ps ...predicate.Visit) *VisitUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VisitUpdateOne) Select(field string, fields ...string) *VisitUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Visit entity.
func (vuo *VisitUpdateOne) Save(ctx context.Context) (*Visit, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VisitUpdateOne) SaveX(ctx context.Context) *Visit {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VisitUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VisitUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VisitUpdateOne) sqlSave(ctx context.Context) (_node *Visit, err error) {
	_spec := sqlgraph.NewUpdateSpec(visit.Table, visit.Columns, sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Visit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visit.FieldID)
		for _, f := range fields {
			if !visit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.VisitPrice(); ok {
		_spec.SetField(visit.FieldVisitPrice, field.TypeString, value)
	}
	if vuo.mutation.VisitPriceCleared() {
		_spec.ClearField(visit.FieldVisitPrice, field.TypeString)
	}
	if value, ok := vuo.mutation.VisitedAt(); ok {
		_spec.SetField(visit.FieldVisitedAt, field.TypeTime, value)
	}
	if vuo.mutation.VisitedAtCleared() {
		_spec.ClearField(visit.FieldVisitedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.PaymentType(); ok {
		_spec.SetField(visit.FieldPaymentType, field.TypeString, value)
	}
	if vuo.mutation.PaymentTypeCleared() {
		_spec.ClearField(visit.FieldPaymentType, field.TypeString)
	}
	if value, ok := vuo.mutation.IsPaid(); ok {
		_spec.SetField(visit.FieldIsPaid, field.TypeBool, value)
	}
	if vuo.mutation.IsPaidCleared() {
		_spec.ClearField(visit.FieldIsPaid, field.TypeBool)
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(visit.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(visit.FieldUpdatedAt, field.TypeTime, value)
	}
	if vuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(visit.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(visit.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(visit.FieldDeletedAt, field.TypeTime)
	}
	if vuo.mutation.ReceptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.ReceptionTable,
			Columns: []string{visit.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ReceptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.ReceptionTable,
			Columns: []string{visit.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visit.AttachmentTable,
			Columns: []string{visit.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedAttachmentIDs(); len(nodes) > 0 && !vuo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visit.AttachmentTable,
			Columns: []string{visit.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visit.AttachmentTable,
			Columns: []string{visit.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Visit{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
