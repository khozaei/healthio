// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/khozaei/healthio/ent/reception"
	"github.com/khozaei/healthio/ent/visit"
)

// Visit is the model entity for the Visit schema.
type Visit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VisitPrice holds the value of the "visit_price" field.
	VisitPrice string `json:"visit_price,omitempty"`
	// VisitedAt holds the value of the "visited_at" field.
	VisitedAt time.Time `json:"visited_at,omitempty"`
	// PaymentType holds the value of the "payment_type" field.
	PaymentType string `json:"payment_type,omitempty"`
	// IsPaid holds the value of the "is_paid" field.
	IsPaid bool `json:"is_paid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VisitQuery when eager-loading is set.
	Edges           VisitEdges `json:"edges"`
	reception_visit *int
	selectValues    sql.SelectValues
}

// VisitEdges holds the relations/edges for other nodes in the graph.
type VisitEdges struct {
	// Reception holds the value of the reception edge.
	Reception *Reception `json:"reception,omitempty"`
	// Attachment holds the value of the attachment edge.
	Attachment []*Attachment `json:"attachment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ReceptionOrErr returns the Reception value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VisitEdges) ReceptionOrErr() (*Reception, error) {
	if e.loadedTypes[0] {
		if e.Reception == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: reception.Label}
		}
		return e.Reception, nil
	}
	return nil, &NotLoadedError{edge: "reception"}
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading.
func (e VisitEdges) AttachmentOrErr() ([]*Attachment, error) {
	if e.loadedTypes[1] {
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Visit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case visit.FieldIsPaid:
			values[i] = new(sql.NullBool)
		case visit.FieldID:
			values[i] = new(sql.NullInt64)
		case visit.FieldVisitPrice, visit.FieldPaymentType:
			values[i] = new(sql.NullString)
		case visit.FieldVisitedAt, visit.FieldCreatedAt, visit.FieldUpdatedAt, visit.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case visit.ForeignKeys[0]: // reception_visit
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Visit fields.
func (v *Visit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case visit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case visit.FieldVisitPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visit_price", values[i])
			} else if value.Valid {
				v.VisitPrice = value.String
			}
		case visit.FieldVisitedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field visited_at", values[i])
			} else if value.Valid {
				v.VisitedAt = value.Time
			}
		case visit.FieldPaymentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_type", values[i])
			} else if value.Valid {
				v.PaymentType = value.String
			}
		case visit.FieldIsPaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_paid", values[i])
			} else if value.Valid {
				v.IsPaid = value.Bool
			}
		case visit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case visit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case visit.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = value.Time
			}
		case visit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field reception_visit", value)
			} else if value.Valid {
				v.reception_visit = new(int)
				*v.reception_visit = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Visit.
// This includes values selected through modifiers, order, etc.
func (v *Visit) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryReception queries the "reception" edge of the Visit entity.
func (v *Visit) QueryReception() *ReceptionQuery {
	return NewVisitClient(v.config).QueryReception(v)
}

// QueryAttachment queries the "attachment" edge of the Visit entity.
func (v *Visit) QueryAttachment() *AttachmentQuery {
	return NewVisitClient(v.config).QueryAttachment(v)
}

// Update returns a builder for updating this Visit.
// Note that you need to call Visit.Unwrap() before calling this method if this Visit
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Visit) Update() *VisitUpdateOne {
	return NewVisitClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Visit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Visit) Unwrap() *Visit {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Visit is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Visit) String() string {
	var builder strings.Builder
	builder.WriteString("Visit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("visit_price=")
	builder.WriteString(v.VisitPrice)
	builder.WriteString(", ")
	builder.WriteString("visited_at=")
	builder.WriteString(v.VisitedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("payment_type=")
	builder.WriteString(v.PaymentType)
	builder.WriteString(", ")
	builder.WriteString("is_paid=")
	builder.WriteString(fmt.Sprintf("%v", v.IsPaid))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(v.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Visits is a parsable slice of Visit.
type Visits []*Visit
