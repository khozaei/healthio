// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/khozaei/healthio/ent/attachment"
	"github.com/khozaei/healthio/ent/patient"
	"github.com/khozaei/healthio/ent/predicate"
	"github.com/khozaei/healthio/ent/reception"
	"github.com/khozaei/healthio/ent/visit"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttachment = "Attachment"
	TypePatient    = "Patient"
	TypeReception  = "Reception"
	TypeVisit      = "Visit"
)

// AttachmentMutation represents an operation that mutates the Attachment nodes in the graph.
type AttachmentMutation struct {
	config
	op             Op
	typ            string
	id             *int
	file_path      *string
	file_type      *string
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	clearedFields  map[string]struct{}
	visit          *int
	clearedvisit   bool
	patient        *int
	clearedpatient bool
	done           bool
	oldValue       func(context.Context) (*Attachment, error)
	predicates     []predicate.Attachment
}

var _ ent.Mutation = (*AttachmentMutation)(nil)

// attachmentOption allows management of the mutation configuration using functional options.
type attachmentOption func(*AttachmentMutation)

// newAttachmentMutation creates new mutation for the Attachment entity.
func newAttachmentMutation(c config, op Op, opts ...attachmentOption) *AttachmentMutation {
	m := &AttachmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAttachment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttachmentID sets the ID field of the mutation.
func withAttachmentID(id int) attachmentOption {
	return func(m *AttachmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Attachment
		)
		m.oldValue = func(ctx context.Context) (*Attachment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attachment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttachment sets the old Attachment of the mutation.
func withAttachment(node *Attachment) attachmentOption {
	return func(m *AttachmentMutation) {
		m.oldValue = func(context.Context) (*Attachment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttachmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttachmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttachmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttachmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attachment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFilePath sets the "file_path" field.
func (m *AttachmentMutation) SetFilePath(s string) {
	m.file_path = &s
}

// FilePath returns the value of the "file_path" field in the mutation.
func (m *AttachmentMutation) FilePath() (r string, exists bool) {
	v := m.file_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "file_path" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ClearFilePath clears the value of the "file_path" field.
func (m *AttachmentMutation) ClearFilePath() {
	m.file_path = nil
	m.clearedFields[attachment.FieldFilePath] = struct{}{}
}

// FilePathCleared returns if the "file_path" field was cleared in this mutation.
func (m *AttachmentMutation) FilePathCleared() bool {
	_, ok := m.clearedFields[attachment.FieldFilePath]
	return ok
}

// ResetFilePath resets all changes to the "file_path" field.
func (m *AttachmentMutation) ResetFilePath() {
	m.file_path = nil
	delete(m.clearedFields, attachment.FieldFilePath)
}

// SetFileType sets the "file_type" field.
func (m *AttachmentMutation) SetFileType(s string) {
	m.file_type = &s
}

// FileType returns the value of the "file_type" field in the mutation.
func (m *AttachmentMutation) FileType() (r string, exists bool) {
	v := m.file_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFileType returns the old "file_type" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldFileType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileType: %w", err)
	}
	return oldValue.FileType, nil
}

// ClearFileType clears the value of the "file_type" field.
func (m *AttachmentMutation) ClearFileType() {
	m.file_type = nil
	m.clearedFields[attachment.FieldFileType] = struct{}{}
}

// FileTypeCleared returns if the "file_type" field was cleared in this mutation.
func (m *AttachmentMutation) FileTypeCleared() bool {
	_, ok := m.clearedFields[attachment.FieldFileType]
	return ok
}

// ResetFileType resets all changes to the "file_type" field.
func (m *AttachmentMutation) ResetFileType() {
	m.file_type = nil
	delete(m.clearedFields, attachment.FieldFileType)
}

// SetCreatedAt sets the "created_at" field.
func (m *AttachmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AttachmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AttachmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AttachmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AttachmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AttachmentMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[attachment.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AttachmentMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[attachment.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AttachmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, attachment.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AttachmentMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AttachmentMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AttachmentMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[attachment.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AttachmentMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[attachment.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AttachmentMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, attachment.FieldDeletedAt)
}

// SetVisitID sets the "visit" edge to the Visit entity by id.
func (m *AttachmentMutation) SetVisitID(id int) {
	m.visit = &id
}

// ClearVisit clears the "visit" edge to the Visit entity.
func (m *AttachmentMutation) ClearVisit() {
	m.clearedvisit = true
}

// VisitCleared reports if the "visit" edge to the Visit entity was cleared.
func (m *AttachmentMutation) VisitCleared() bool {
	return m.clearedvisit
}

// VisitID returns the "visit" edge ID in the mutation.
func (m *AttachmentMutation) VisitID() (id int, exists bool) {
	if m.visit != nil {
		return *m.visit, true
	}
	return
}

// VisitIDs returns the "visit" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VisitID instead. It exists only for internal usage by the builders.
func (m *AttachmentMutation) VisitIDs() (ids []int) {
	if id := m.visit; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVisit resets all changes to the "visit" edge.
func (m *AttachmentMutation) ResetVisit() {
	m.visit = nil
	m.clearedvisit = false
}

// SetPatientID sets the "patient" edge to the Patient entity by id.
func (m *AttachmentMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (m *AttachmentMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared reports if the "patient" edge to the Patient entity was cleared.
func (m *AttachmentMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the "patient" edge ID in the mutation.
func (m *AttachmentMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *AttachmentMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *AttachmentMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// Where appends a list predicates to the AttachmentMutation builder.
func (m *AttachmentMutation) Where(ps ...predicate.Attachment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttachmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttachmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Attachment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttachmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttachmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Attachment).
func (m *AttachmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttachmentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.file_path != nil {
		fields = append(fields, attachment.FieldFilePath)
	}
	if m.file_type != nil {
		fields = append(fields, attachment.FieldFileType)
	}
	if m.created_at != nil {
		fields = append(fields, attachment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, attachment.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, attachment.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttachmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attachment.FieldFilePath:
		return m.FilePath()
	case attachment.FieldFileType:
		return m.FileType()
	case attachment.FieldCreatedAt:
		return m.CreatedAt()
	case attachment.FieldUpdatedAt:
		return m.UpdatedAt()
	case attachment.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttachmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attachment.FieldFilePath:
		return m.OldFilePath(ctx)
	case attachment.FieldFileType:
		return m.OldFileType(ctx)
	case attachment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case attachment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case attachment.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Attachment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attachment.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	case attachment.FieldFileType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileType(v)
		return nil
	case attachment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case attachment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case attachment.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttachmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttachmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attachment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttachmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(attachment.FieldFilePath) {
		fields = append(fields, attachment.FieldFilePath)
	}
	if m.FieldCleared(attachment.FieldFileType) {
		fields = append(fields, attachment.FieldFileType)
	}
	if m.FieldCleared(attachment.FieldUpdatedAt) {
		fields = append(fields, attachment.FieldUpdatedAt)
	}
	if m.FieldCleared(attachment.FieldDeletedAt) {
		fields = append(fields, attachment.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttachmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttachmentMutation) ClearField(name string) error {
	switch name {
	case attachment.FieldFilePath:
		m.ClearFilePath()
		return nil
	case attachment.FieldFileType:
		m.ClearFileType()
		return nil
	case attachment.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case attachment.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Attachment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttachmentMutation) ResetField(name string) error {
	switch name {
	case attachment.FieldFilePath:
		m.ResetFilePath()
		return nil
	case attachment.FieldFileType:
		m.ResetFileType()
		return nil
	case attachment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case attachment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case attachment.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttachmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.visit != nil {
		edges = append(edges, attachment.EdgeVisit)
	}
	if m.patient != nil {
		edges = append(edges, attachment.EdgePatient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttachmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attachment.EdgeVisit:
		if id := m.visit; id != nil {
			return []ent.Value{*id}
		}
	case attachment.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttachmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttachmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttachmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvisit {
		edges = append(edges, attachment.EdgeVisit)
	}
	if m.clearedpatient {
		edges = append(edges, attachment.EdgePatient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttachmentMutation) EdgeCleared(name string) bool {
	switch name {
	case attachment.EdgeVisit:
		return m.clearedvisit
	case attachment.EdgePatient:
		return m.clearedpatient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttachmentMutation) ClearEdge(name string) error {
	switch name {
	case attachment.EdgeVisit:
		m.ClearVisit()
		return nil
	case attachment.EdgePatient:
		m.ClearPatient()
		return nil
	}
	return fmt.Errorf("unknown Attachment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttachmentMutation) ResetEdge(name string) error {
	switch name {
	case attachment.EdgeVisit:
		m.ResetVisit()
		return nil
	case attachment.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Attachment edge %s", name)
}

// PatientMutation represents an operation that mutates the Patient nodes in the graph.
type PatientMutation struct {
	config
	op                Op
	typ               string
	id                *int
	first_name        *string
	last_name         *string
	father_name       *string
	phone             *string
	national_code     *string
	identity_code     *string
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	clearedFields     map[string]struct{}
	attachment        map[int]struct{}
	removedattachment map[int]struct{}
	clearedattachment bool
	reception         map[int]struct{}
	removedreception  map[int]struct{}
	clearedreception  bool
	done              bool
	oldValue          func(context.Context) (*Patient, error)
	predicates        []predicate.Patient
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows management of the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for the Patient entity.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the ID field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PatientMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Patient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *PatientMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *PatientMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *PatientMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[patient.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *PatientMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[patient.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *PatientMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, patient.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *PatientMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *PatientMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *PatientMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[patient.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *PatientMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[patient.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *PatientMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, patient.FieldLastName)
}

// SetFatherName sets the "father_name" field.
func (m *PatientMutation) SetFatherName(s string) {
	m.father_name = &s
}

// FatherName returns the value of the "father_name" field in the mutation.
func (m *PatientMutation) FatherName() (r string, exists bool) {
	v := m.father_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFatherName returns the old "father_name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldFatherName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFatherName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFatherName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFatherName: %w", err)
	}
	return oldValue.FatherName, nil
}

// ClearFatherName clears the value of the "father_name" field.
func (m *PatientMutation) ClearFatherName() {
	m.father_name = nil
	m.clearedFields[patient.FieldFatherName] = struct{}{}
}

// FatherNameCleared returns if the "father_name" field was cleared in this mutation.
func (m *PatientMutation) FatherNameCleared() bool {
	_, ok := m.clearedFields[patient.FieldFatherName]
	return ok
}

// ResetFatherName resets all changes to the "father_name" field.
func (m *PatientMutation) ResetFatherName() {
	m.father_name = nil
	delete(m.clearedFields, patient.FieldFatherName)
}

// SetPhone sets the "phone" field.
func (m *PatientMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *PatientMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *PatientMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[patient.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *PatientMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[patient.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *PatientMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, patient.FieldPhone)
}

// SetNationalCode sets the "national_code" field.
func (m *PatientMutation) SetNationalCode(s string) {
	m.national_code = &s
}

// NationalCode returns the value of the "national_code" field in the mutation.
func (m *PatientMutation) NationalCode() (r string, exists bool) {
	v := m.national_code
	if v == nil {
		return
	}
	return *v, true
}

// OldNationalCode returns the old "national_code" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldNationalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNationalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNationalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNationalCode: %w", err)
	}
	return oldValue.NationalCode, nil
}

// ClearNationalCode clears the value of the "national_code" field.
func (m *PatientMutation) ClearNationalCode() {
	m.national_code = nil
	m.clearedFields[patient.FieldNationalCode] = struct{}{}
}

// NationalCodeCleared returns if the "national_code" field was cleared in this mutation.
func (m *PatientMutation) NationalCodeCleared() bool {
	_, ok := m.clearedFields[patient.FieldNationalCode]
	return ok
}

// ResetNationalCode resets all changes to the "national_code" field.
func (m *PatientMutation) ResetNationalCode() {
	m.national_code = nil
	delete(m.clearedFields, patient.FieldNationalCode)
}

// SetIdentityCode sets the "identity_code" field.
func (m *PatientMutation) SetIdentityCode(s string) {
	m.identity_code = &s
}

// IdentityCode returns the value of the "identity_code" field in the mutation.
func (m *PatientMutation) IdentityCode() (r string, exists bool) {
	v := m.identity_code
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentityCode returns the old "identity_code" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldIdentityCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentityCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentityCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentityCode: %w", err)
	}
	return oldValue.IdentityCode, nil
}

// ClearIdentityCode clears the value of the "identity_code" field.
func (m *PatientMutation) ClearIdentityCode() {
	m.identity_code = nil
	m.clearedFields[patient.FieldIdentityCode] = struct{}{}
}

// IdentityCodeCleared returns if the "identity_code" field was cleared in this mutation.
func (m *PatientMutation) IdentityCodeCleared() bool {
	_, ok := m.clearedFields[patient.FieldIdentityCode]
	return ok
}

// ResetIdentityCode resets all changes to the "identity_code" field.
func (m *PatientMutation) ResetIdentityCode() {
	m.identity_code = nil
	delete(m.clearedFields, patient.FieldIdentityCode)
}

// SetCreatedAt sets the "created_at" field.
func (m *PatientMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PatientMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PatientMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PatientMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PatientMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *PatientMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[patient.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *PatientMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[patient.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PatientMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, patient.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PatientMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PatientMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *PatientMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[patient.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *PatientMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[patient.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PatientMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, patient.FieldDeletedAt)
}

// AddAttachmentIDs adds the "attachment" edge to the Attachment entity by ids.
func (m *PatientMutation) AddAttachmentIDs(ids ...int) {
	if m.attachment == nil {
		m.attachment = make(map[int]struct{})
	}
	for i := range ids {
		m.attachment[ids[i]] = struct{}{}
	}
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (m *PatientMutation) ClearAttachment() {
	m.clearedattachment = true
}

// AttachmentCleared reports if the "attachment" edge to the Attachment entity was cleared.
func (m *PatientMutation) AttachmentCleared() bool {
	return m.clearedattachment
}

// RemoveAttachmentIDs removes the "attachment" edge to the Attachment entity by IDs.
func (m *PatientMutation) RemoveAttachmentIDs(ids ...int) {
	if m.removedattachment == nil {
		m.removedattachment = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attachment, ids[i])
		m.removedattachment[ids[i]] = struct{}{}
	}
}

// RemovedAttachment returns the removed IDs of the "attachment" edge to the Attachment entity.
func (m *PatientMutation) RemovedAttachmentIDs() (ids []int) {
	for id := range m.removedattachment {
		ids = append(ids, id)
	}
	return
}

// AttachmentIDs returns the "attachment" edge IDs in the mutation.
func (m *PatientMutation) AttachmentIDs() (ids []int) {
	for id := range m.attachment {
		ids = append(ids, id)
	}
	return
}

// ResetAttachment resets all changes to the "attachment" edge.
func (m *PatientMutation) ResetAttachment() {
	m.attachment = nil
	m.clearedattachment = false
	m.removedattachment = nil
}

// AddReceptionIDs adds the "reception" edge to the Reception entity by ids.
func (m *PatientMutation) AddReceptionIDs(ids ...int) {
	if m.reception == nil {
		m.reception = make(map[int]struct{})
	}
	for i := range ids {
		m.reception[ids[i]] = struct{}{}
	}
}

// ClearReception clears the "reception" edge to the Reception entity.
func (m *PatientMutation) ClearReception() {
	m.clearedreception = true
}

// ReceptionCleared reports if the "reception" edge to the Reception entity was cleared.
func (m *PatientMutation) ReceptionCleared() bool {
	return m.clearedreception
}

// RemoveReceptionIDs removes the "reception" edge to the Reception entity by IDs.
func (m *PatientMutation) RemoveReceptionIDs(ids ...int) {
	if m.removedreception == nil {
		m.removedreception = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reception, ids[i])
		m.removedreception[ids[i]] = struct{}{}
	}
}

// RemovedReception returns the removed IDs of the "reception" edge to the Reception entity.
func (m *PatientMutation) RemovedReceptionIDs() (ids []int) {
	for id := range m.removedreception {
		ids = append(ids, id)
	}
	return
}

// ReceptionIDs returns the "reception" edge IDs in the mutation.
func (m *PatientMutation) ReceptionIDs() (ids []int) {
	for id := range m.reception {
		ids = append(ids, id)
	}
	return
}

// ResetReception resets all changes to the "reception" edge.
func (m *PatientMutation) ResetReception() {
	m.reception = nil
	m.clearedreception = false
	m.removedreception = nil
}

// Where appends a list predicates to the PatientMutation builder.
func (m *PatientMutation) Where(ps ...predicate.Patient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PatientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PatientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Patient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PatientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.first_name != nil {
		fields = append(fields, patient.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, patient.FieldLastName)
	}
	if m.father_name != nil {
		fields = append(fields, patient.FieldFatherName)
	}
	if m.phone != nil {
		fields = append(fields, patient.FieldPhone)
	}
	if m.national_code != nil {
		fields = append(fields, patient.FieldNationalCode)
	}
	if m.identity_code != nil {
		fields = append(fields, patient.FieldIdentityCode)
	}
	if m.created_at != nil {
		fields = append(fields, patient.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, patient.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, patient.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldFirstName:
		return m.FirstName()
	case patient.FieldLastName:
		return m.LastName()
	case patient.FieldFatherName:
		return m.FatherName()
	case patient.FieldPhone:
		return m.Phone()
	case patient.FieldNationalCode:
		return m.NationalCode()
	case patient.FieldIdentityCode:
		return m.IdentityCode()
	case patient.FieldCreatedAt:
		return m.CreatedAt()
	case patient.FieldUpdatedAt:
		return m.UpdatedAt()
	case patient.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldFirstName:
		return m.OldFirstName(ctx)
	case patient.FieldLastName:
		return m.OldLastName(ctx)
	case patient.FieldFatherName:
		return m.OldFatherName(ctx)
	case patient.FieldPhone:
		return m.OldPhone(ctx)
	case patient.FieldNationalCode:
		return m.OldNationalCode(ctx)
	case patient.FieldIdentityCode:
		return m.OldIdentityCode(ctx)
	case patient.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case patient.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case patient.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case patient.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case patient.FieldFatherName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFatherName(v)
		return nil
	case patient.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case patient.FieldNationalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNationalCode(v)
		return nil
	case patient.FieldIdentityCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentityCode(v)
		return nil
	case patient.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case patient.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case patient.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PatientMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(patient.FieldFirstName) {
		fields = append(fields, patient.FieldFirstName)
	}
	if m.FieldCleared(patient.FieldLastName) {
		fields = append(fields, patient.FieldLastName)
	}
	if m.FieldCleared(patient.FieldFatherName) {
		fields = append(fields, patient.FieldFatherName)
	}
	if m.FieldCleared(patient.FieldPhone) {
		fields = append(fields, patient.FieldPhone)
	}
	if m.FieldCleared(patient.FieldNationalCode) {
		fields = append(fields, patient.FieldNationalCode)
	}
	if m.FieldCleared(patient.FieldIdentityCode) {
		fields = append(fields, patient.FieldIdentityCode)
	}
	if m.FieldCleared(patient.FieldUpdatedAt) {
		fields = append(fields, patient.FieldUpdatedAt)
	}
	if m.FieldCleared(patient.FieldDeletedAt) {
		fields = append(fields, patient.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	switch name {
	case patient.FieldFirstName:
		m.ClearFirstName()
		return nil
	case patient.FieldLastName:
		m.ClearLastName()
		return nil
	case patient.FieldFatherName:
		m.ClearFatherName()
		return nil
	case patient.FieldPhone:
		m.ClearPhone()
		return nil
	case patient.FieldNationalCode:
		m.ClearNationalCode()
		return nil
	case patient.FieldIdentityCode:
		m.ClearIdentityCode()
		return nil
	case patient.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case patient.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldFirstName:
		m.ResetFirstName()
		return nil
	case patient.FieldLastName:
		m.ResetLastName()
		return nil
	case patient.FieldFatherName:
		m.ResetFatherName()
		return nil
	case patient.FieldPhone:
		m.ResetPhone()
		return nil
	case patient.FieldNationalCode:
		m.ResetNationalCode()
		return nil
	case patient.FieldIdentityCode:
		m.ResetIdentityCode()
		return nil
	case patient.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case patient.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case patient.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.attachment != nil {
		edges = append(edges, patient.EdgeAttachment)
	}
	if m.reception != nil {
		edges = append(edges, patient.EdgeReception)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeAttachment:
		ids := make([]ent.Value, 0, len(m.attachment))
		for id := range m.attachment {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeReception:
		ids := make([]ent.Value, 0, len(m.reception))
		for id := range m.reception {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedattachment != nil {
		edges = append(edges, patient.EdgeAttachment)
	}
	if m.removedreception != nil {
		edges = append(edges, patient.EdgeReception)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeAttachment:
		ids := make([]ent.Value, 0, len(m.removedattachment))
		for id := range m.removedattachment {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeReception:
		ids := make([]ent.Value, 0, len(m.removedreception))
		for id := range m.removedreception {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedattachment {
		edges = append(edges, patient.EdgeAttachment)
	}
	if m.clearedreception {
		edges = append(edges, patient.EdgeReception)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeAttachment:
		return m.clearedattachment
	case patient.EdgeReception:
		return m.clearedreception
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeAttachment:
		m.ResetAttachment()
		return nil
	case patient.EdgeReception:
		m.ResetReception()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// ReceptionMutation represents an operation that mutates the Reception nodes in the graph.
type ReceptionMutation struct {
	config
	op                Op
	typ               string
	id                *int
	reception_for     *time.Time
	visit_duration    *int
	addvisit_duration *int
	insurance_code    *string
	description       *string
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	clearedFields     map[string]struct{}
	patient           *int
	clearedpatient    bool
	visit             map[int]struct{}
	removedvisit      map[int]struct{}
	clearedvisit      bool
	done              bool
	oldValue          func(context.Context) (*Reception, error)
	predicates        []predicate.Reception
}

var _ ent.Mutation = (*ReceptionMutation)(nil)

// receptionOption allows management of the mutation configuration using functional options.
type receptionOption func(*ReceptionMutation)

// newReceptionMutation creates new mutation for the Reception entity.
func newReceptionMutation(c config, op Op, opts ...receptionOption) *ReceptionMutation {
	m := &ReceptionMutation{
		config:        c,
		op:            op,
		typ:           TypeReception,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReceptionID sets the ID field of the mutation.
func withReceptionID(id int) receptionOption {
	return func(m *ReceptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Reception
		)
		m.oldValue = func(ctx context.Context) (*Reception, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reception.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReception sets the old Reception of the mutation.
func withReception(node *Reception) receptionOption {
	return func(m *ReceptionMutation) {
		m.oldValue = func(context.Context) (*Reception, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReceptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReceptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReceptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReceptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reception.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetReceptionFor sets the "reception_for" field.
func (m *ReceptionMutation) SetReceptionFor(t time.Time) {
	m.reception_for = &t
}

// ReceptionFor returns the value of the "reception_for" field in the mutation.
func (m *ReceptionMutation) ReceptionFor() (r time.Time, exists bool) {
	v := m.reception_for
	if v == nil {
		return
	}
	return *v, true
}

// OldReceptionFor returns the old "reception_for" field's value of the Reception entity.
// If the Reception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceptionMutation) OldReceptionFor(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceptionFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceptionFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceptionFor: %w", err)
	}
	return oldValue.ReceptionFor, nil
}

// ResetReceptionFor resets all changes to the "reception_for" field.
func (m *ReceptionMutation) ResetReceptionFor() {
	m.reception_for = nil
}

// SetVisitDuration sets the "visit_duration" field.
func (m *ReceptionMutation) SetVisitDuration(i int) {
	m.visit_duration = &i
	m.addvisit_duration = nil
}

// VisitDuration returns the value of the "visit_duration" field in the mutation.
func (m *ReceptionMutation) VisitDuration() (r int, exists bool) {
	v := m.visit_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitDuration returns the old "visit_duration" field's value of the Reception entity.
// If the Reception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceptionMutation) OldVisitDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisitDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisitDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitDuration: %w", err)
	}
	return oldValue.VisitDuration, nil
}

// AddVisitDuration adds i to the "visit_duration" field.
func (m *ReceptionMutation) AddVisitDuration(i int) {
	if m.addvisit_duration != nil {
		*m.addvisit_duration += i
	} else {
		m.addvisit_duration = &i
	}
}

// AddedVisitDuration returns the value that was added to the "visit_duration" field in this mutation.
func (m *ReceptionMutation) AddedVisitDuration() (r int, exists bool) {
	v := m.addvisit_duration
	if v == nil {
		return
	}
	return *v, true
}

// ResetVisitDuration resets all changes to the "visit_duration" field.
func (m *ReceptionMutation) ResetVisitDuration() {
	m.visit_duration = nil
	m.addvisit_duration = nil
}

// SetInsuranceCode sets the "insurance_code" field.
func (m *ReceptionMutation) SetInsuranceCode(s string) {
	m.insurance_code = &s
}

// InsuranceCode returns the value of the "insurance_code" field in the mutation.
func (m *ReceptionMutation) InsuranceCode() (r string, exists bool) {
	v := m.insurance_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInsuranceCode returns the old "insurance_code" field's value of the Reception entity.
// If the Reception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceptionMutation) OldInsuranceCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInsuranceCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInsuranceCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsuranceCode: %w", err)
	}
	return oldValue.InsuranceCode, nil
}

// ClearInsuranceCode clears the value of the "insurance_code" field.
func (m *ReceptionMutation) ClearInsuranceCode() {
	m.insurance_code = nil
	m.clearedFields[reception.FieldInsuranceCode] = struct{}{}
}

// InsuranceCodeCleared returns if the "insurance_code" field was cleared in this mutation.
func (m *ReceptionMutation) InsuranceCodeCleared() bool {
	_, ok := m.clearedFields[reception.FieldInsuranceCode]
	return ok
}

// ResetInsuranceCode resets all changes to the "insurance_code" field.
func (m *ReceptionMutation) ResetInsuranceCode() {
	m.insurance_code = nil
	delete(m.clearedFields, reception.FieldInsuranceCode)
}

// SetDescription sets the "description" field.
func (m *ReceptionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ReceptionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Reception entity.
// If the Reception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceptionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ReceptionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[reception.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ReceptionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[reception.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ReceptionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, reception.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *ReceptionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReceptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Reception entity.
// If the Reception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReceptionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReceptionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReceptionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Reception entity.
// If the Reception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceptionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ReceptionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[reception.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ReceptionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[reception.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReceptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, reception.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ReceptionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ReceptionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Reception entity.
// If the Reception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReceptionMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ReceptionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[reception.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ReceptionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[reception.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ReceptionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, reception.FieldDeletedAt)
}

// SetPatientID sets the "patient" edge to the Patient entity by id.
func (m *ReceptionMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (m *ReceptionMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared reports if the "patient" edge to the Patient entity was cleared.
func (m *ReceptionMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the "patient" edge ID in the mutation.
func (m *ReceptionMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *ReceptionMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *ReceptionMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// AddVisitIDs adds the "visit" edge to the Visit entity by ids.
func (m *ReceptionMutation) AddVisitIDs(ids ...int) {
	if m.visit == nil {
		m.visit = make(map[int]struct{})
	}
	for i := range ids {
		m.visit[ids[i]] = struct{}{}
	}
}

// ClearVisit clears the "visit" edge to the Visit entity.
func (m *ReceptionMutation) ClearVisit() {
	m.clearedvisit = true
}

// VisitCleared reports if the "visit" edge to the Visit entity was cleared.
func (m *ReceptionMutation) VisitCleared() bool {
	return m.clearedvisit
}

// RemoveVisitIDs removes the "visit" edge to the Visit entity by IDs.
func (m *ReceptionMutation) RemoveVisitIDs(ids ...int) {
	if m.removedvisit == nil {
		m.removedvisit = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.visit, ids[i])
		m.removedvisit[ids[i]] = struct{}{}
	}
}

// RemovedVisit returns the removed IDs of the "visit" edge to the Visit entity.
func (m *ReceptionMutation) RemovedVisitIDs() (ids []int) {
	for id := range m.removedvisit {
		ids = append(ids, id)
	}
	return
}

// VisitIDs returns the "visit" edge IDs in the mutation.
func (m *ReceptionMutation) VisitIDs() (ids []int) {
	for id := range m.visit {
		ids = append(ids, id)
	}
	return
}

// ResetVisit resets all changes to the "visit" edge.
func (m *ReceptionMutation) ResetVisit() {
	m.visit = nil
	m.clearedvisit = false
	m.removedvisit = nil
}

// Where appends a list predicates to the ReceptionMutation builder.
func (m *ReceptionMutation) Where(ps ...predicate.Reception) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReceptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReceptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Reception, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReceptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReceptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Reception).
func (m *ReceptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReceptionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.reception_for != nil {
		fields = append(fields, reception.FieldReceptionFor)
	}
	if m.visit_duration != nil {
		fields = append(fields, reception.FieldVisitDuration)
	}
	if m.insurance_code != nil {
		fields = append(fields, reception.FieldInsuranceCode)
	}
	if m.description != nil {
		fields = append(fields, reception.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, reception.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, reception.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, reception.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReceptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reception.FieldReceptionFor:
		return m.ReceptionFor()
	case reception.FieldVisitDuration:
		return m.VisitDuration()
	case reception.FieldInsuranceCode:
		return m.InsuranceCode()
	case reception.FieldDescription:
		return m.Description()
	case reception.FieldCreatedAt:
		return m.CreatedAt()
	case reception.FieldUpdatedAt:
		return m.UpdatedAt()
	case reception.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReceptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reception.FieldReceptionFor:
		return m.OldReceptionFor(ctx)
	case reception.FieldVisitDuration:
		return m.OldVisitDuration(ctx)
	case reception.FieldInsuranceCode:
		return m.OldInsuranceCode(ctx)
	case reception.FieldDescription:
		return m.OldDescription(ctx)
	case reception.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case reception.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case reception.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Reception field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReceptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reception.FieldReceptionFor:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceptionFor(v)
		return nil
	case reception.FieldVisitDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitDuration(v)
		return nil
	case reception.FieldInsuranceCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsuranceCode(v)
		return nil
	case reception.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case reception.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case reception.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case reception.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Reception field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReceptionMutation) AddedFields() []string {
	var fields []string
	if m.addvisit_duration != nil {
		fields = append(fields, reception.FieldVisitDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReceptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case reception.FieldVisitDuration:
		return m.AddedVisitDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReceptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case reception.FieldVisitDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVisitDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Reception numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReceptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(reception.FieldInsuranceCode) {
		fields = append(fields, reception.FieldInsuranceCode)
	}
	if m.FieldCleared(reception.FieldDescription) {
		fields = append(fields, reception.FieldDescription)
	}
	if m.FieldCleared(reception.FieldUpdatedAt) {
		fields = append(fields, reception.FieldUpdatedAt)
	}
	if m.FieldCleared(reception.FieldDeletedAt) {
		fields = append(fields, reception.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReceptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReceptionMutation) ClearField(name string) error {
	switch name {
	case reception.FieldInsuranceCode:
		m.ClearInsuranceCode()
		return nil
	case reception.FieldDescription:
		m.ClearDescription()
		return nil
	case reception.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case reception.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Reception nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReceptionMutation) ResetField(name string) error {
	switch name {
	case reception.FieldReceptionFor:
		m.ResetReceptionFor()
		return nil
	case reception.FieldVisitDuration:
		m.ResetVisitDuration()
		return nil
	case reception.FieldInsuranceCode:
		m.ResetInsuranceCode()
		return nil
	case reception.FieldDescription:
		m.ResetDescription()
		return nil
	case reception.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case reception.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case reception.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Reception field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReceptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.patient != nil {
		edges = append(edges, reception.EdgePatient)
	}
	if m.visit != nil {
		edges = append(edges, reception.EdgeVisit)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReceptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reception.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case reception.EdgeVisit:
		ids := make([]ent.Value, 0, len(m.visit))
		for id := range m.visit {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReceptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedvisit != nil {
		edges = append(edges, reception.EdgeVisit)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReceptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case reception.EdgeVisit:
		ids := make([]ent.Value, 0, len(m.removedvisit))
		for id := range m.removedvisit {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReceptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpatient {
		edges = append(edges, reception.EdgePatient)
	}
	if m.clearedvisit {
		edges = append(edges, reception.EdgeVisit)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReceptionMutation) EdgeCleared(name string) bool {
	switch name {
	case reception.EdgePatient:
		return m.clearedpatient
	case reception.EdgeVisit:
		return m.clearedvisit
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReceptionMutation) ClearEdge(name string) error {
	switch name {
	case reception.EdgePatient:
		m.ClearPatient()
		return nil
	}
	return fmt.Errorf("unknown Reception unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReceptionMutation) ResetEdge(name string) error {
	switch name {
	case reception.EdgePatient:
		m.ResetPatient()
		return nil
	case reception.EdgeVisit:
		m.ResetVisit()
		return nil
	}
	return fmt.Errorf("unknown Reception edge %s", name)
}

// VisitMutation represents an operation that mutates the Visit nodes in the graph.
type VisitMutation struct {
	config
	op                Op
	typ               string
	id                *int
	visit_price       *string
	visited_at        *time.Time
	payment_type      *string
	is_paid           *bool
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	clearedFields     map[string]struct{}
	reception         *int
	clearedreception  bool
	attachment        map[int]struct{}
	removedattachment map[int]struct{}
	clearedattachment bool
	done              bool
	oldValue          func(context.Context) (*Visit, error)
	predicates        []predicate.Visit
}

var _ ent.Mutation = (*VisitMutation)(nil)

// visitOption allows management of the mutation configuration using functional options.
type visitOption func(*VisitMutation)

// newVisitMutation creates new mutation for the Visit entity.
func newVisitMutation(c config, op Op, opts ...visitOption) *VisitMutation {
	m := &VisitMutation{
		config:        c,
		op:            op,
		typ:           TypeVisit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVisitID sets the ID field of the mutation.
func withVisitID(id int) visitOption {
	return func(m *VisitMutation) {
		var (
			err   error
			once  sync.Once
			value *Visit
		)
		m.oldValue = func(ctx context.Context) (*Visit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Visit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVisit sets the old Visit of the mutation.
func withVisit(node *Visit) visitOption {
	return func(m *VisitMutation) {
		m.oldValue = func(context.Context) (*Visit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VisitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VisitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VisitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VisitMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Visit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVisitPrice sets the "visit_price" field.
func (m *VisitMutation) SetVisitPrice(s string) {
	m.visit_price = &s
}

// VisitPrice returns the value of the "visit_price" field in the mutation.
func (m *VisitMutation) VisitPrice() (r string, exists bool) {
	v := m.visit_price
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitPrice returns the old "visit_price" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldVisitPrice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisitPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisitPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitPrice: %w", err)
	}
	return oldValue.VisitPrice, nil
}

// ClearVisitPrice clears the value of the "visit_price" field.
func (m *VisitMutation) ClearVisitPrice() {
	m.visit_price = nil
	m.clearedFields[visit.FieldVisitPrice] = struct{}{}
}

// VisitPriceCleared returns if the "visit_price" field was cleared in this mutation.
func (m *VisitMutation) VisitPriceCleared() bool {
	_, ok := m.clearedFields[visit.FieldVisitPrice]
	return ok
}

// ResetVisitPrice resets all changes to the "visit_price" field.
func (m *VisitMutation) ResetVisitPrice() {
	m.visit_price = nil
	delete(m.clearedFields, visit.FieldVisitPrice)
}

// SetVisitedAt sets the "visited_at" field.
func (m *VisitMutation) SetVisitedAt(t time.Time) {
	m.visited_at = &t
}

// VisitedAt returns the value of the "visited_at" field in the mutation.
func (m *VisitMutation) VisitedAt() (r time.Time, exists bool) {
	v := m.visited_at
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitedAt returns the old "visited_at" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldVisitedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisitedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisitedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitedAt: %w", err)
	}
	return oldValue.VisitedAt, nil
}

// ClearVisitedAt clears the value of the "visited_at" field.
func (m *VisitMutation) ClearVisitedAt() {
	m.visited_at = nil
	m.clearedFields[visit.FieldVisitedAt] = struct{}{}
}

// VisitedAtCleared returns if the "visited_at" field was cleared in this mutation.
func (m *VisitMutation) VisitedAtCleared() bool {
	_, ok := m.clearedFields[visit.FieldVisitedAt]
	return ok
}

// ResetVisitedAt resets all changes to the "visited_at" field.
func (m *VisitMutation) ResetVisitedAt() {
	m.visited_at = nil
	delete(m.clearedFields, visit.FieldVisitedAt)
}

// SetPaymentType sets the "payment_type" field.
func (m *VisitMutation) SetPaymentType(s string) {
	m.payment_type = &s
}

// PaymentType returns the value of the "payment_type" field in the mutation.
func (m *VisitMutation) PaymentType() (r string, exists bool) {
	v := m.payment_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentType returns the old "payment_type" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldPaymentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentType: %w", err)
	}
	return oldValue.PaymentType, nil
}

// ClearPaymentType clears the value of the "payment_type" field.
func (m *VisitMutation) ClearPaymentType() {
	m.payment_type = nil
	m.clearedFields[visit.FieldPaymentType] = struct{}{}
}

// PaymentTypeCleared returns if the "payment_type" field was cleared in this mutation.
func (m *VisitMutation) PaymentTypeCleared() bool {
	_, ok := m.clearedFields[visit.FieldPaymentType]
	return ok
}

// ResetPaymentType resets all changes to the "payment_type" field.
func (m *VisitMutation) ResetPaymentType() {
	m.payment_type = nil
	delete(m.clearedFields, visit.FieldPaymentType)
}

// SetIsPaid sets the "is_paid" field.
func (m *VisitMutation) SetIsPaid(b bool) {
	m.is_paid = &b
}

// IsPaid returns the value of the "is_paid" field in the mutation.
func (m *VisitMutation) IsPaid() (r bool, exists bool) {
	v := m.is_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPaid returns the old "is_paid" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldIsPaid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPaid: %w", err)
	}
	return oldValue.IsPaid, nil
}

// ClearIsPaid clears the value of the "is_paid" field.
func (m *VisitMutation) ClearIsPaid() {
	m.is_paid = nil
	m.clearedFields[visit.FieldIsPaid] = struct{}{}
}

// IsPaidCleared returns if the "is_paid" field was cleared in this mutation.
func (m *VisitMutation) IsPaidCleared() bool {
	_, ok := m.clearedFields[visit.FieldIsPaid]
	return ok
}

// ResetIsPaid resets all changes to the "is_paid" field.
func (m *VisitMutation) ResetIsPaid() {
	m.is_paid = nil
	delete(m.clearedFields, visit.FieldIsPaid)
}

// SetCreatedAt sets the "created_at" field.
func (m *VisitMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VisitMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VisitMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VisitMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VisitMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *VisitMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[visit.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *VisitMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[visit.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VisitMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, visit.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *VisitMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *VisitMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *VisitMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[visit.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *VisitMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[visit.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *VisitMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, visit.FieldDeletedAt)
}

// SetReceptionID sets the "reception" edge to the Reception entity by id.
func (m *VisitMutation) SetReceptionID(id int) {
	m.reception = &id
}

// ClearReception clears the "reception" edge to the Reception entity.
func (m *VisitMutation) ClearReception() {
	m.clearedreception = true
}

// ReceptionCleared reports if the "reception" edge to the Reception entity was cleared.
func (m *VisitMutation) ReceptionCleared() bool {
	return m.clearedreception
}

// ReceptionID returns the "reception" edge ID in the mutation.
func (m *VisitMutation) ReceptionID() (id int, exists bool) {
	if m.reception != nil {
		return *m.reception, true
	}
	return
}

// ReceptionIDs returns the "reception" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReceptionID instead. It exists only for internal usage by the builders.
func (m *VisitMutation) ReceptionIDs() (ids []int) {
	if id := m.reception; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReception resets all changes to the "reception" edge.
func (m *VisitMutation) ResetReception() {
	m.reception = nil
	m.clearedreception = false
}

// AddAttachmentIDs adds the "attachment" edge to the Attachment entity by ids.
func (m *VisitMutation) AddAttachmentIDs(ids ...int) {
	if m.attachment == nil {
		m.attachment = make(map[int]struct{})
	}
	for i := range ids {
		m.attachment[ids[i]] = struct{}{}
	}
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (m *VisitMutation) ClearAttachment() {
	m.clearedattachment = true
}

// AttachmentCleared reports if the "attachment" edge to the Attachment entity was cleared.
func (m *VisitMutation) AttachmentCleared() bool {
	return m.clearedattachment
}

// RemoveAttachmentIDs removes the "attachment" edge to the Attachment entity by IDs.
func (m *VisitMutation) RemoveAttachmentIDs(ids ...int) {
	if m.removedattachment == nil {
		m.removedattachment = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attachment, ids[i])
		m.removedattachment[ids[i]] = struct{}{}
	}
}

// RemovedAttachment returns the removed IDs of the "attachment" edge to the Attachment entity.
func (m *VisitMutation) RemovedAttachmentIDs() (ids []int) {
	for id := range m.removedattachment {
		ids = append(ids, id)
	}
	return
}

// AttachmentIDs returns the "attachment" edge IDs in the mutation.
func (m *VisitMutation) AttachmentIDs() (ids []int) {
	for id := range m.attachment {
		ids = append(ids, id)
	}
	return
}

// ResetAttachment resets all changes to the "attachment" edge.
func (m *VisitMutation) ResetAttachment() {
	m.attachment = nil
	m.clearedattachment = false
	m.removedattachment = nil
}

// Where appends a list predicates to the VisitMutation builder.
func (m *VisitMutation) Where(ps ...predicate.Visit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VisitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VisitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Visit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VisitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VisitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Visit).
func (m *VisitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VisitMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.visit_price != nil {
		fields = append(fields, visit.FieldVisitPrice)
	}
	if m.visited_at != nil {
		fields = append(fields, visit.FieldVisitedAt)
	}
	if m.payment_type != nil {
		fields = append(fields, visit.FieldPaymentType)
	}
	if m.is_paid != nil {
		fields = append(fields, visit.FieldIsPaid)
	}
	if m.created_at != nil {
		fields = append(fields, visit.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, visit.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, visit.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VisitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case visit.FieldVisitPrice:
		return m.VisitPrice()
	case visit.FieldVisitedAt:
		return m.VisitedAt()
	case visit.FieldPaymentType:
		return m.PaymentType()
	case visit.FieldIsPaid:
		return m.IsPaid()
	case visit.FieldCreatedAt:
		return m.CreatedAt()
	case visit.FieldUpdatedAt:
		return m.UpdatedAt()
	case visit.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VisitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case visit.FieldVisitPrice:
		return m.OldVisitPrice(ctx)
	case visit.FieldVisitedAt:
		return m.OldVisitedAt(ctx)
	case visit.FieldPaymentType:
		return m.OldPaymentType(ctx)
	case visit.FieldIsPaid:
		return m.OldIsPaid(ctx)
	case visit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case visit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case visit.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Visit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VisitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case visit.FieldVisitPrice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitPrice(v)
		return nil
	case visit.FieldVisitedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitedAt(v)
		return nil
	case visit.FieldPaymentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentType(v)
		return nil
	case visit.FieldIsPaid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPaid(v)
		return nil
	case visit.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case visit.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case visit.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Visit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VisitMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VisitMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VisitMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Visit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VisitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(visit.FieldVisitPrice) {
		fields = append(fields, visit.FieldVisitPrice)
	}
	if m.FieldCleared(visit.FieldVisitedAt) {
		fields = append(fields, visit.FieldVisitedAt)
	}
	if m.FieldCleared(visit.FieldPaymentType) {
		fields = append(fields, visit.FieldPaymentType)
	}
	if m.FieldCleared(visit.FieldIsPaid) {
		fields = append(fields, visit.FieldIsPaid)
	}
	if m.FieldCleared(visit.FieldUpdatedAt) {
		fields = append(fields, visit.FieldUpdatedAt)
	}
	if m.FieldCleared(visit.FieldDeletedAt) {
		fields = append(fields, visit.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VisitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VisitMutation) ClearField(name string) error {
	switch name {
	case visit.FieldVisitPrice:
		m.ClearVisitPrice()
		return nil
	case visit.FieldVisitedAt:
		m.ClearVisitedAt()
		return nil
	case visit.FieldPaymentType:
		m.ClearPaymentType()
		return nil
	case visit.FieldIsPaid:
		m.ClearIsPaid()
		return nil
	case visit.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case visit.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Visit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VisitMutation) ResetField(name string) error {
	switch name {
	case visit.FieldVisitPrice:
		m.ResetVisitPrice()
		return nil
	case visit.FieldVisitedAt:
		m.ResetVisitedAt()
		return nil
	case visit.FieldPaymentType:
		m.ResetPaymentType()
		return nil
	case visit.FieldIsPaid:
		m.ResetIsPaid()
		return nil
	case visit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case visit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case visit.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Visit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VisitMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.reception != nil {
		edges = append(edges, visit.EdgeReception)
	}
	if m.attachment != nil {
		edges = append(edges, visit.EdgeAttachment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VisitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case visit.EdgeReception:
		if id := m.reception; id != nil {
			return []ent.Value{*id}
		}
	case visit.EdgeAttachment:
		ids := make([]ent.Value, 0, len(m.attachment))
		for id := range m.attachment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VisitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedattachment != nil {
		edges = append(edges, visit.EdgeAttachment)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VisitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case visit.EdgeAttachment:
		ids := make([]ent.Value, 0, len(m.removedattachment))
		for id := range m.removedattachment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VisitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedreception {
		edges = append(edges, visit.EdgeReception)
	}
	if m.clearedattachment {
		edges = append(edges, visit.EdgeAttachment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VisitMutation) EdgeCleared(name string) bool {
	switch name {
	case visit.EdgeReception:
		return m.clearedreception
	case visit.EdgeAttachment:
		return m.clearedattachment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VisitMutation) ClearEdge(name string) error {
	switch name {
	case visit.EdgeReception:
		m.ClearReception()
		return nil
	}
	return fmt.Errorf("unknown Visit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VisitMutation) ResetEdge(name string) error {
	switch name {
	case visit.EdgeReception:
		m.ResetReception()
		return nil
	case visit.EdgeAttachment:
		m.ResetAttachment()
		return nil
	}
	return fmt.Errorf("unknown Visit edge %s", name)
}
