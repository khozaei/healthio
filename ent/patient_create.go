// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khozaei/healthio/ent/attachment"
	"github.com/khozaei/healthio/ent/patient"
	"github.com/khozaei/healthio/ent/reception"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	mutation *PatientMutation
	hooks    []Hook
}

// SetFirstName sets the "first_name" field.
func (pc *PatientCreate) SetFirstName(s string) *PatientCreate {
	pc.mutation.SetFirstName(s)
	return pc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pc *PatientCreate) SetNillableFirstName(s *string) *PatientCreate {
	if s != nil {
		pc.SetFirstName(*s)
	}
	return pc
}

// SetLastName sets the "last_name" field.
func (pc *PatientCreate) SetLastName(s string) *PatientCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pc *PatientCreate) SetNillableLastName(s *string) *PatientCreate {
	if s != nil {
		pc.SetLastName(*s)
	}
	return pc
}

// SetFatherName sets the "father_name" field.
func (pc *PatientCreate) SetFatherName(s string) *PatientCreate {
	pc.mutation.SetFatherName(s)
	return pc
}

// SetNillableFatherName sets the "father_name" field if the given value is not nil.
func (pc *PatientCreate) SetNillableFatherName(s *string) *PatientCreate {
	if s != nil {
		pc.SetFatherName(*s)
	}
	return pc
}

// SetPhone sets the "phone" field.
func (pc *PatientCreate) SetPhone(s string) *PatientCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pc *PatientCreate) SetNillablePhone(s *string) *PatientCreate {
	if s != nil {
		pc.SetPhone(*s)
	}
	return pc
}

// SetNationalCode sets the "national_code" field.
func (pc *PatientCreate) SetNationalCode(s string) *PatientCreate {
	pc.mutation.SetNationalCode(s)
	return pc
}

// SetNillableNationalCode sets the "national_code" field if the given value is not nil.
func (pc *PatientCreate) SetNillableNationalCode(s *string) *PatientCreate {
	if s != nil {
		pc.SetNationalCode(*s)
	}
	return pc
}

// SetIdentityCode sets the "identity_code" field.
func (pc *PatientCreate) SetIdentityCode(s string) *PatientCreate {
	pc.mutation.SetIdentityCode(s)
	return pc
}

// SetNillableIdentityCode sets the "identity_code" field if the given value is not nil.
func (pc *PatientCreate) SetNillableIdentityCode(s *string) *PatientCreate {
	if s != nil {
		pc.SetIdentityCode(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PatientCreate) SetCreatedAt(t time.Time) *PatientCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PatientCreate) SetNillableCreatedAt(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PatientCreate) SetUpdatedAt(t time.Time) *PatientCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PatientCreate) SetNillableUpdatedAt(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PatientCreate) SetDeletedAt(t time.Time) *PatientCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PatientCreate) SetNillableDeletedAt(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// AddAttachmentIDs adds the "attachment" edge to the Attachment entity by IDs.
func (pc *PatientCreate) AddAttachmentIDs(ids ...int) *PatientCreate {
	pc.mutation.AddAttachmentIDs(ids...)
	return pc
}

// AddAttachment adds the "attachment" edges to the Attachment entity.
func (pc *PatientCreate) AddAttachment(a ...*Attachment) *PatientCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAttachmentIDs(ids...)
}

// AddReceptionIDs adds the "reception" edge to the Reception entity by IDs.
func (pc *PatientCreate) AddReceptionIDs(ids ...int) *PatientCreate {
	pc.mutation.AddReceptionIDs(ids...)
	return pc
}

// AddReception adds the "reception" edges to the Reception entity.
func (pc *PatientCreate) AddReception(r ...*Reception) *PatientCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReceptionIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pc *PatientCreate) Mutation() *PatientMutation {
	return pc.mutation
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PatientCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PatientCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PatientCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := patient.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PatientCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Patient.created_at"`)}
	}
	return nil
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PatientCreate) createSpec() (*Patient, *sqlgraph.CreateSpec) {
	var (
		_node = &Patient{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(patient.Table, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.FirstName(); ok {
		_spec.SetField(patient.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.SetField(patient.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := pc.mutation.FatherName(); ok {
		_spec.SetField(patient.FieldFatherName, field.TypeString, value)
		_node.FatherName = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(patient.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pc.mutation.NationalCode(); ok {
		_spec.SetField(patient.FieldNationalCode, field.TypeString, value)
		_node.NationalCode = value
	}
	if value, ok := pc.mutation.IdentityCode(); ok {
		_spec.SetField(patient.FieldIdentityCode, field.TypeString, value)
		_node.IdentityCode = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(patient.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(patient.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(patient.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := pc.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.AttachmentTable,
			Columns: []string{patient.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReceptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.ReceptionTable,
			Columns: []string{patient.ReceptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PatientCreateBulk is the builder for creating many Patient entities in bulk.
type PatientCreateBulk struct {
	config
	builders []*PatientCreate
}

// Save creates the Patient entities in the database.
func (pcb *PatientCreateBulk) Save(ctx context.Context) ([]*Patient, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Patient, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PatientCreateBulk) SaveX(ctx context.Context) []*Patient {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PatientCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PatientCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
