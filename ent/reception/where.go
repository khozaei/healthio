// Code generated by ent, DO NOT EDIT.

package reception

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/khozaei/healthio/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Reception {
	return predicate.Reception(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Reception {
	return predicate.Reception(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Reception {
	return predicate.Reception(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Reception {
	return predicate.Reception(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Reception {
	return predicate.Reception(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Reception {
	return predicate.Reception(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Reception {
	return predicate.Reception(sql.FieldLTE(FieldID, id))
}

// ReceptionFor applies equality check predicate on the "reception_for" field. It's identical to ReceptionForEQ.
func ReceptionFor(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldReceptionFor, v))
}

// VisitDuration applies equality check predicate on the "visit_duration" field. It's identical to VisitDurationEQ.
func VisitDuration(v int) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldVisitDuration, v))
}

// InsuranceCode applies equality check predicate on the "insurance_code" field. It's identical to InsuranceCodeEQ.
func InsuranceCode(v string) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldInsuranceCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldDeletedAt, v))
}

// ReceptionForEQ applies the EQ predicate on the "reception_for" field.
func ReceptionForEQ(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldReceptionFor, v))
}

// ReceptionForNEQ applies the NEQ predicate on the "reception_for" field.
func ReceptionForNEQ(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldNEQ(FieldReceptionFor, v))
}

// ReceptionForIn applies the In predicate on the "reception_for" field.
func ReceptionForIn(vs ...time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldIn(FieldReceptionFor, vs...))
}

// ReceptionForNotIn applies the NotIn predicate on the "reception_for" field.
func ReceptionForNotIn(vs ...time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldNotIn(FieldReceptionFor, vs...))
}

// ReceptionForGT applies the GT predicate on the "reception_for" field.
func ReceptionForGT(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldGT(FieldReceptionFor, v))
}

// ReceptionForGTE applies the GTE predicate on the "reception_for" field.
func ReceptionForGTE(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldGTE(FieldReceptionFor, v))
}

// ReceptionForLT applies the LT predicate on the "reception_for" field.
func ReceptionForLT(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldLT(FieldReceptionFor, v))
}

// ReceptionForLTE applies the LTE predicate on the "reception_for" field.
func ReceptionForLTE(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldLTE(FieldReceptionFor, v))
}

// VisitDurationEQ applies the EQ predicate on the "visit_duration" field.
func VisitDurationEQ(v int) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldVisitDuration, v))
}

// VisitDurationNEQ applies the NEQ predicate on the "visit_duration" field.
func VisitDurationNEQ(v int) predicate.Reception {
	return predicate.Reception(sql.FieldNEQ(FieldVisitDuration, v))
}

// VisitDurationIn applies the In predicate on the "visit_duration" field.
func VisitDurationIn(vs ...int) predicate.Reception {
	return predicate.Reception(sql.FieldIn(FieldVisitDuration, vs...))
}

// VisitDurationNotIn applies the NotIn predicate on the "visit_duration" field.
func VisitDurationNotIn(vs ...int) predicate.Reception {
	return predicate.Reception(sql.FieldNotIn(FieldVisitDuration, vs...))
}

// VisitDurationGT applies the GT predicate on the "visit_duration" field.
func VisitDurationGT(v int) predicate.Reception {
	return predicate.Reception(sql.FieldGT(FieldVisitDuration, v))
}

// VisitDurationGTE applies the GTE predicate on the "visit_duration" field.
func VisitDurationGTE(v int) predicate.Reception {
	return predicate.Reception(sql.FieldGTE(FieldVisitDuration, v))
}

// VisitDurationLT applies the LT predicate on the "visit_duration" field.
func VisitDurationLT(v int) predicate.Reception {
	return predicate.Reception(sql.FieldLT(FieldVisitDuration, v))
}

// VisitDurationLTE applies the LTE predicate on the "visit_duration" field.
func VisitDurationLTE(v int) predicate.Reception {
	return predicate.Reception(sql.FieldLTE(FieldVisitDuration, v))
}

// InsuranceCodeEQ applies the EQ predicate on the "insurance_code" field.
func InsuranceCodeEQ(v string) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldInsuranceCode, v))
}

// InsuranceCodeNEQ applies the NEQ predicate on the "insurance_code" field.
func InsuranceCodeNEQ(v string) predicate.Reception {
	return predicate.Reception(sql.FieldNEQ(FieldInsuranceCode, v))
}

// InsuranceCodeIn applies the In predicate on the "insurance_code" field.
func InsuranceCodeIn(vs ...string) predicate.Reception {
	return predicate.Reception(sql.FieldIn(FieldInsuranceCode, vs...))
}

// InsuranceCodeNotIn applies the NotIn predicate on the "insurance_code" field.
func InsuranceCodeNotIn(vs ...string) predicate.Reception {
	return predicate.Reception(sql.FieldNotIn(FieldInsuranceCode, vs...))
}

// InsuranceCodeGT applies the GT predicate on the "insurance_code" field.
func InsuranceCodeGT(v string) predicate.Reception {
	return predicate.Reception(sql.FieldGT(FieldInsuranceCode, v))
}

// InsuranceCodeGTE applies the GTE predicate on the "insurance_code" field.
func InsuranceCodeGTE(v string) predicate.Reception {
	return predicate.Reception(sql.FieldGTE(FieldInsuranceCode, v))
}

// InsuranceCodeLT applies the LT predicate on the "insurance_code" field.
func InsuranceCodeLT(v string) predicate.Reception {
	return predicate.Reception(sql.FieldLT(FieldInsuranceCode, v))
}

// InsuranceCodeLTE applies the LTE predicate on the "insurance_code" field.
func InsuranceCodeLTE(v string) predicate.Reception {
	return predicate.Reception(sql.FieldLTE(FieldInsuranceCode, v))
}

// InsuranceCodeContains applies the Contains predicate on the "insurance_code" field.
func InsuranceCodeContains(v string) predicate.Reception {
	return predicate.Reception(sql.FieldContains(FieldInsuranceCode, v))
}

// InsuranceCodeHasPrefix applies the HasPrefix predicate on the "insurance_code" field.
func InsuranceCodeHasPrefix(v string) predicate.Reception {
	return predicate.Reception(sql.FieldHasPrefix(FieldInsuranceCode, v))
}

// InsuranceCodeHasSuffix applies the HasSuffix predicate on the "insurance_code" field.
func InsuranceCodeHasSuffix(v string) predicate.Reception {
	return predicate.Reception(sql.FieldHasSuffix(FieldInsuranceCode, v))
}

// InsuranceCodeIsNil applies the IsNil predicate on the "insurance_code" field.
func InsuranceCodeIsNil() predicate.Reception {
	return predicate.Reception(sql.FieldIsNull(FieldInsuranceCode))
}

// InsuranceCodeNotNil applies the NotNil predicate on the "insurance_code" field.
func InsuranceCodeNotNil() predicate.Reception {
	return predicate.Reception(sql.FieldNotNull(FieldInsuranceCode))
}

// InsuranceCodeEqualFold applies the EqualFold predicate on the "insurance_code" field.
func InsuranceCodeEqualFold(v string) predicate.Reception {
	return predicate.Reception(sql.FieldEqualFold(FieldInsuranceCode, v))
}

// InsuranceCodeContainsFold applies the ContainsFold predicate on the "insurance_code" field.
func InsuranceCodeContainsFold(v string) predicate.Reception {
	return predicate.Reception(sql.FieldContainsFold(FieldInsuranceCode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Reception {
	return predicate.Reception(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Reception {
	return predicate.Reception(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Reception {
	return predicate.Reception(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Reception {
	return predicate.Reception(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Reception {
	return predicate.Reception(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Reception {
	return predicate.Reception(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Reception {
	return predicate.Reception(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Reception {
	return predicate.Reception(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Reception {
	return predicate.Reception(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Reception {
	return predicate.Reception(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Reception {
	return predicate.Reception(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Reception {
	return predicate.Reception(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Reception {
	return predicate.Reception(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Reception {
	return predicate.Reception(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Reception {
	return predicate.Reception(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Reception {
	return predicate.Reception(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Reception {
	return predicate.Reception(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Reception {
	return predicate.Reception(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Reception {
	return predicate.Reception(sql.FieldNotNull(FieldDeletedAt))
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Reception {
	return predicate.Reception(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Reception {
	return predicate.Reception(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVisit applies the HasEdge predicate on the "visit" edge.
func HasVisit() predicate.Reception {
	return predicate.Reception(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VisitTable, VisitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVisitWith applies the HasEdge predicate on the "visit" edge with a given conditions (other predicates).
func HasVisitWith(preds ...predicate.Visit) predicate.Reception {
	return predicate.Reception(func(s *sql.Selector) {
		step := newVisitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reception) predicate.Reception {
	return predicate.Reception(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reception) predicate.Reception {
	return predicate.Reception(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reception) predicate.Reception {
	return predicate.Reception(func(s *sql.Selector) {
		p(s.Not())
	})
}
