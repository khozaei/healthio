// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khozaei/healthio/ent/patient"
	"github.com/khozaei/healthio/ent/predicate"
	"github.com/khozaei/healthio/ent/reception"
	"github.com/khozaei/healthio/ent/visit"
)

// ReceptionUpdate is the builder for updating Reception entities.
type ReceptionUpdate struct {
	config
	hooks    []Hook
	mutation *ReceptionMutation
}

// Where appends a list predicates to the ReceptionUpdate builder.
func (ru *ReceptionUpdate) Where(ps ...predicate.Reception) *ReceptionUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetReceptionFor sets the "reception_for" field.
func (ru *ReceptionUpdate) SetReceptionFor(t time.Time) *ReceptionUpdate {
	ru.mutation.SetReceptionFor(t)
	return ru
}

// SetVisitDuration sets the "visit_duration" field.
func (ru *ReceptionUpdate) SetVisitDuration(i int) *ReceptionUpdate {
	ru.mutation.ResetVisitDuration()
	ru.mutation.SetVisitDuration(i)
	return ru
}

// AddVisitDuration adds i to the "visit_duration" field.
func (ru *ReceptionUpdate) AddVisitDuration(i int) *ReceptionUpdate {
	ru.mutation.AddVisitDuration(i)
	return ru
}

// SetInsuranceCode sets the "insurance_code" field.
func (ru *ReceptionUpdate) SetInsuranceCode(s string) *ReceptionUpdate {
	ru.mutation.SetInsuranceCode(s)
	return ru
}

// SetNillableInsuranceCode sets the "insurance_code" field if the given value is not nil.
func (ru *ReceptionUpdate) SetNillableInsuranceCode(s *string) *ReceptionUpdate {
	if s != nil {
		ru.SetInsuranceCode(*s)
	}
	return ru
}

// ClearInsuranceCode clears the value of the "insurance_code" field.
func (ru *ReceptionUpdate) ClearInsuranceCode() *ReceptionUpdate {
	ru.mutation.ClearInsuranceCode()
	return ru
}

// SetDescription sets the "description" field.
func (ru *ReceptionUpdate) SetDescription(s string) *ReceptionUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *ReceptionUpdate) SetNillableDescription(s *string) *ReceptionUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *ReceptionUpdate) ClearDescription() *ReceptionUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReceptionUpdate) SetCreatedAt(t time.Time) *ReceptionUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReceptionUpdate) SetNillableCreatedAt(t *time.Time) *ReceptionUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReceptionUpdate) SetUpdatedAt(t time.Time) *ReceptionUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *ReceptionUpdate) SetNillableUpdatedAt(t *time.Time) *ReceptionUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *ReceptionUpdate) ClearUpdatedAt() *ReceptionUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *ReceptionUpdate) SetDeletedAt(t time.Time) *ReceptionUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *ReceptionUpdate) SetNillableDeletedAt(t *time.Time) *ReceptionUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *ReceptionUpdate) ClearDeletedAt() *ReceptionUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ru *ReceptionUpdate) SetPatientID(id int) *ReceptionUpdate {
	ru.mutation.SetPatientID(id)
	return ru
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ru *ReceptionUpdate) SetNillablePatientID(id *int) *ReceptionUpdate {
	if id != nil {
		ru = ru.SetPatientID(*id)
	}
	return ru
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ru *ReceptionUpdate) SetPatient(p *Patient) *ReceptionUpdate {
	return ru.SetPatientID(p.ID)
}

// AddVisitIDs adds the "visit" edge to the Visit entity by IDs.
func (ru *ReceptionUpdate) AddVisitIDs(ids ...int) *ReceptionUpdate {
	ru.mutation.AddVisitIDs(ids...)
	return ru
}

// AddVisit adds the "visit" edges to the Visit entity.
func (ru *ReceptionUpdate) AddVisit(v ...*Visit) *ReceptionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ru.AddVisitIDs(ids...)
}

// Mutation returns the ReceptionMutation object of the builder.
func (ru *ReceptionUpdate) Mutation() *ReceptionMutation {
	return ru.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (ru *ReceptionUpdate) ClearPatient() *ReceptionUpdate {
	ru.mutation.ClearPatient()
	return ru
}

// ClearVisit clears all "visit" edges to the Visit entity.
func (ru *ReceptionUpdate) ClearVisit() *ReceptionUpdate {
	ru.mutation.ClearVisit()
	return ru
}

// RemoveVisitIDs removes the "visit" edge to Visit entities by IDs.
func (ru *ReceptionUpdate) RemoveVisitIDs(ids ...int) *ReceptionUpdate {
	ru.mutation.RemoveVisitIDs(ids...)
	return ru
}

// RemoveVisit removes "visit" edges to Visit entities.
func (ru *ReceptionUpdate) RemoveVisit(v ...*Visit) *ReceptionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ru.RemoveVisitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReceptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReceptionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReceptionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReceptionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReceptionUpdate) check() error {
	if v, ok := ru.mutation.VisitDuration(); ok {
		if err := reception.VisitDurationValidator(v); err != nil {
			return &ValidationError{Name: "visit_duration", err: fmt.Errorf(`ent: validator failed for field "Reception.visit_duration": %w`, err)}
		}
	}
	return nil
}

func (ru *ReceptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reception.Table, reception.Columns, sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ReceptionFor(); ok {
		_spec.SetField(reception.FieldReceptionFor, field.TypeTime, value)
	}
	if value, ok := ru.mutation.VisitDuration(); ok {
		_spec.SetField(reception.FieldVisitDuration, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedVisitDuration(); ok {
		_spec.AddField(reception.FieldVisitDuration, field.TypeInt, value)
	}
	if value, ok := ru.mutation.InsuranceCode(); ok {
		_spec.SetField(reception.FieldInsuranceCode, field.TypeString, value)
	}
	if ru.mutation.InsuranceCodeCleared() {
		_spec.ClearField(reception.FieldInsuranceCode, field.TypeString)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(reception.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(reception.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(reception.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(reception.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(reception.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(reception.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(reception.FieldDeletedAt, field.TypeTime)
	}
	if ru.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reception.PatientTable,
			Columns: []string{reception.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reception.PatientTable,
			Columns: []string{reception.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.VisitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reception.VisitTable,
			Columns: []string{reception.VisitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedVisitIDs(); len(nodes) > 0 && !ru.mutation.VisitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reception.VisitTable,
			Columns: []string{reception.VisitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.VisitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reception.VisitTable,
			Columns: []string{reception.VisitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reception.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReceptionUpdateOne is the builder for updating a single Reception entity.
type ReceptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReceptionMutation
}

// SetReceptionFor sets the "reception_for" field.
func (ruo *ReceptionUpdateOne) SetReceptionFor(t time.Time) *ReceptionUpdateOne {
	ruo.mutation.SetReceptionFor(t)
	return ruo
}

// SetVisitDuration sets the "visit_duration" field.
func (ruo *ReceptionUpdateOne) SetVisitDuration(i int) *ReceptionUpdateOne {
	ruo.mutation.ResetVisitDuration()
	ruo.mutation.SetVisitDuration(i)
	return ruo
}

// AddVisitDuration adds i to the "visit_duration" field.
func (ruo *ReceptionUpdateOne) AddVisitDuration(i int) *ReceptionUpdateOne {
	ruo.mutation.AddVisitDuration(i)
	return ruo
}

// SetInsuranceCode sets the "insurance_code" field.
func (ruo *ReceptionUpdateOne) SetInsuranceCode(s string) *ReceptionUpdateOne {
	ruo.mutation.SetInsuranceCode(s)
	return ruo
}

// SetNillableInsuranceCode sets the "insurance_code" field if the given value is not nil.
func (ruo *ReceptionUpdateOne) SetNillableInsuranceCode(s *string) *ReceptionUpdateOne {
	if s != nil {
		ruo.SetInsuranceCode(*s)
	}
	return ruo
}

// ClearInsuranceCode clears the value of the "insurance_code" field.
func (ruo *ReceptionUpdateOne) ClearInsuranceCode() *ReceptionUpdateOne {
	ruo.mutation.ClearInsuranceCode()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *ReceptionUpdateOne) SetDescription(s string) *ReceptionUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *ReceptionUpdateOne) SetNillableDescription(s *string) *ReceptionUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *ReceptionUpdateOne) ClearDescription() *ReceptionUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReceptionUpdateOne) SetCreatedAt(t time.Time) *ReceptionUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReceptionUpdateOne) SetNillableCreatedAt(t *time.Time) *ReceptionUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReceptionUpdateOne) SetUpdatedAt(t time.Time) *ReceptionUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *ReceptionUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReceptionUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *ReceptionUpdateOne) ClearUpdatedAt() *ReceptionUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *ReceptionUpdateOne) SetDeletedAt(t time.Time) *ReceptionUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *ReceptionUpdateOne) SetNillableDeletedAt(t *time.Time) *ReceptionUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *ReceptionUpdateOne) ClearDeletedAt() *ReceptionUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (ruo *ReceptionUpdateOne) SetPatientID(id int) *ReceptionUpdateOne {
	ruo.mutation.SetPatientID(id)
	return ruo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (ruo *ReceptionUpdateOne) SetNillablePatientID(id *int) *ReceptionUpdateOne {
	if id != nil {
		ruo = ruo.SetPatientID(*id)
	}
	return ruo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ruo *ReceptionUpdateOne) SetPatient(p *Patient) *ReceptionUpdateOne {
	return ruo.SetPatientID(p.ID)
}

// AddVisitIDs adds the "visit" edge to the Visit entity by IDs.
func (ruo *ReceptionUpdateOne) AddVisitIDs(ids ...int) *ReceptionUpdateOne {
	ruo.mutation.AddVisitIDs(ids...)
	return ruo
}

// AddVisit adds the "visit" edges to the Visit entity.
func (ruo *ReceptionUpdateOne) AddVisit(v ...*Visit) *ReceptionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ruo.AddVisitIDs(ids...)
}

// Mutation returns the ReceptionMutation object of the builder.
func (ruo *ReceptionUpdateOne) Mutation() *ReceptionMutation {
	return ruo.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (ruo *ReceptionUpdateOne) ClearPatient() *ReceptionUpdateOne {
	ruo.mutation.ClearPatient()
	return ruo
}

// ClearVisit clears all "visit" edges to the Visit entity.
func (ruo *ReceptionUpdateOne) ClearVisit() *ReceptionUpdateOne {
	ruo.mutation.ClearVisit()
	return ruo
}

// RemoveVisitIDs removes the "visit" edge to Visit entities by IDs.
func (ruo *ReceptionUpdateOne) RemoveVisitIDs(ids ...int) *ReceptionUpdateOne {
	ruo.mutation.RemoveVisitIDs(ids...)
	return ruo
}

// RemoveVisit removes "visit" edges to Visit entities.
func (ruo *ReceptionUpdateOne) RemoveVisit(v ...*Visit) *ReceptionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ruo.RemoveVisitIDs(ids...)
}

// Where appends a list predicates to the ReceptionUpdate builder.
func (ruo *ReceptionUpdateOne) Where(ps ...predicate.Reception) *ReceptionUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReceptionUpdateOne) Select(field string, fields ...string) *ReceptionUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reception entity.
func (ruo *ReceptionUpdateOne) Save(ctx context.Context) (*Reception, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReceptionUpdateOne) SaveX(ctx context.Context) *Reception {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReceptionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReceptionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReceptionUpdateOne) check() error {
	if v, ok := ruo.mutation.VisitDuration(); ok {
		if err := reception.VisitDurationValidator(v); err != nil {
			return &ValidationError{Name: "visit_duration", err: fmt.Errorf(`ent: validator failed for field "Reception.visit_duration": %w`, err)}
		}
	}
	return nil
}

func (ruo *ReceptionUpdateOne) sqlSave(ctx context.Context) (_node *Reception, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reception.Table, reception.Columns, sqlgraph.NewFieldSpec(reception.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reception.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reception.FieldID)
		for _, f := range fields {
			if !reception.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reception.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.ReceptionFor(); ok {
		_spec.SetField(reception.FieldReceptionFor, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.VisitDuration(); ok {
		_spec.SetField(reception.FieldVisitDuration, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedVisitDuration(); ok {
		_spec.AddField(reception.FieldVisitDuration, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.InsuranceCode(); ok {
		_spec.SetField(reception.FieldInsuranceCode, field.TypeString, value)
	}
	if ruo.mutation.InsuranceCodeCleared() {
		_spec.ClearField(reception.FieldInsuranceCode, field.TypeString)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(reception.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(reception.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(reception.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(reception.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(reception.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(reception.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(reception.FieldDeletedAt, field.TypeTime)
	}
	if ruo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reception.PatientTable,
			Columns: []string{reception.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reception.PatientTable,
			Columns: []string{reception.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.VisitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reception.VisitTable,
			Columns: []string{reception.VisitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedVisitIDs(); len(nodes) > 0 && !ruo.mutation.VisitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reception.VisitTable,
			Columns: []string{reception.VisitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.VisitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reception.VisitTable,
			Columns: []string{reception.VisitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reception{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reception.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
