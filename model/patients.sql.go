// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: patients.sql

package model

import (
	"context"
	"database/sql"
	"time"
)

const addPatient = `-- name: AddPatient :execresult
INSERT INTO patients(first_name, last_name, father_name, national_code, phone,
            identity_code, created_at)
VALUES(?, ?, ?, ?, ?, ?, ?)
`

type AddPatientParams struct {
	FirstName    sql.NullString
	LastName     sql.NullString
	FatherName   sql.NullString
	NationalCode sql.NullString
	Phone        sql.NullString
	IdentityCode sql.NullString
	CreatedAt    time.Time
}

func (q *Queries) AddPatient(ctx context.Context, arg AddPatientParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addPatient,
		arg.FirstName,
		arg.LastName,
		arg.FatherName,
		arg.NationalCode,
		arg.Phone,
		arg.IdentityCode,
		arg.CreatedAt,
	)
}

const deletePatient = `-- name: DeletePatient :exec
UPDATE patients SET
    deleted_at = ?
WHERE id = ?
`

type DeletePatientParams struct {
	DeletedAt sql.NullTime
	ID        int64
}

func (q *Queries) DeletePatient(ctx context.Context, arg DeletePatientParams) error {
	_, err := q.db.ExecContext(ctx, deletePatient, arg.DeletedAt, arg.ID)
	return err
}

const findPatient = `-- name: FindPatient :many
SELECT id, first_name, last_name, father_name, phone, national_code, identity_code, created_at, updated_at, deleted_at FROM patients
WHERE deleted_at IS NULL AND 
    (last_name LIKE CONCAT('%',?,'%') OR
    first_name LIKE CONCAT('%',?,'%') OR
    national_code LIKE CONCAT('%',?,'%'))
ORDER BY last_name LIMIT ? OFFSET ?
`

type FindPatientParams struct {
	CONCAT   interface{}
	CONCAT_2 interface{}
	CONCAT_3 interface{}
	Limit    int32
	Offset   int32
}

func (q *Queries) FindPatient(ctx context.Context, arg FindPatientParams) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, findPatient,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.CONCAT_3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.FatherName,
			&i.Phone,
			&i.NationalCode,
			&i.IdentityCode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatient = `-- name: GetPatient :one
SELECT id, first_name, last_name, father_name, phone, national_code, identity_code, created_at, updated_at, deleted_at FROM patients 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPatient(ctx context.Context, id int64) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatient, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FatherName,
		&i.Phone,
		&i.NationalCode,
		&i.IdentityCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePatient = `-- name: UpdatePatient :exec
UPDATE patients SET 
    first_name = ?,
    last_name = ?,
    national_code = ?,
    identity_code = ?,
    father_name = ?,
    phone = ?,
    updated_at = ?
    WHERE id = ?
`

type UpdatePatientParams struct {
	FirstName    sql.NullString
	LastName     sql.NullString
	NationalCode sql.NullString
	IdentityCode sql.NullString
	FatherName   sql.NullString
	Phone        sql.NullString
	UpdatedAt    sql.NullTime
	ID           int64
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) error {
	_, err := q.db.ExecContext(ctx, updatePatient,
		arg.FirstName,
		arg.LastName,
		arg.NationalCode,
		arg.IdentityCode,
		arg.FatherName,
		arg.Phone,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
