// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: attachments.sql

package model

import (
	"context"
	"database/sql"
	"time"
)

const addAttachment = `-- name: AddAttachment :execresult
INSERT INTO attachments(file_path, file_type, visit_id,
            patient_id, created_at)
VALUES(?, ?, ?, ?, ?)
`

type AddAttachmentParams struct {
	FilePath  sql.NullString
	FileType  sql.NullString
	VisitID   sql.NullInt64
	PatientID sql.NullInt64
	CreatedAt time.Time
}

func (q *Queries) AddAttachment(ctx context.Context, arg AddAttachmentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addAttachment,
		arg.FilePath,
		arg.FileType,
		arg.VisitID,
		arg.PatientID,
		arg.CreatedAt,
	)
}

const deleteAttachment = `-- name: DeleteAttachment :exec
UPDATE attachments SET
    deleted_at = ?
WHERE id = ?
`

type DeleteAttachmentParams struct {
	DeletedAt sql.NullTime
	ID        int64
}

func (q *Queries) DeleteAttachment(ctx context.Context, arg DeleteAttachmentParams) error {
	_, err := q.db.ExecContext(ctx, deleteAttachment, arg.DeletedAt, arg.ID)
	return err
}

const findAttachments = `-- name: FindAttachments :many
SELECT a.id, file_path, file_type, visit_id, patient_id, a.created_at, a.updated_at, a.deleted_at, v.id, visit_price, visit_date, visit_time, payment_type, is_paid, reception_id, v.created_at, v.updated_at, v.deleted_at FROM attachments AS a JOIN visits AS v on v.id = a.visit_id 
WHERE a.deleted_at IS NULL AND
    v.id = ? 
ORDER BY v.visit_date, v.visit_time LIMIT ? OFFSET ?
`

type FindAttachmentsParams struct {
	ID     int64
	Limit  int32
	Offset int32
}

type FindAttachmentsRow struct {
	ID          int64
	FilePath    sql.NullString
	FileType    sql.NullString
	VisitID     sql.NullInt64
	PatientID   sql.NullInt64
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullTime
	ID_2        int64
	VisitPrice  sql.NullInt64
	VisitDate   sql.NullTime
	VisitTime   sql.NullTime
	PaymentType sql.NullString
	IsPaid      sql.NullBool
	ReceptionID int64
	CreatedAt_2 time.Time
	UpdatedAt_2 sql.NullTime
	DeletedAt_2 sql.NullTime
}

func (q *Queries) FindAttachments(ctx context.Context, arg FindAttachmentsParams) ([]FindAttachmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, findAttachments, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAttachmentsRow
	for rows.Next() {
		var i FindAttachmentsRow
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.FileType,
			&i.VisitID,
			&i.PatientID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.VisitPrice,
			&i.VisitDate,
			&i.VisitTime,
			&i.PaymentType,
			&i.IsPaid,
			&i.ReceptionID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAttachmentsByPatient = `-- name: FindAttachmentsByPatient :many
SELECT a.id, file_path, file_type, visit_id, patient_id, a.created_at, a.updated_at, a.deleted_at, p.id, first_name, last_name, father_name, phone, national_code, identity_code, p.created_at, p.updated_at, p.deleted_at FROM attachments AS a JOIN patients AS p on p.id = a.patient_id 
WHERE a.deleted_at IS NULL AND
    p.id = ? 
ORDER BY a.created_at LIMIT ? OFFSET ?
`

type FindAttachmentsByPatientParams struct {
	ID     int64
	Limit  int32
	Offset int32
}

type FindAttachmentsByPatientRow struct {
	ID           int64
	FilePath     sql.NullString
	FileType     sql.NullString
	VisitID      sql.NullInt64
	PatientID    sql.NullInt64
	CreatedAt    time.Time
	UpdatedAt    sql.NullTime
	DeletedAt    sql.NullTime
	ID_2         int64
	FirstName    sql.NullString
	LastName     sql.NullString
	FatherName   sql.NullString
	Phone        sql.NullString
	NationalCode sql.NullString
	IdentityCode sql.NullString
	CreatedAt_2  time.Time
	UpdatedAt_2  sql.NullTime
	DeletedAt_2  sql.NullTime
}

func (q *Queries) FindAttachmentsByPatient(ctx context.Context, arg FindAttachmentsByPatientParams) ([]FindAttachmentsByPatientRow, error) {
	rows, err := q.db.QueryContext(ctx, findAttachmentsByPatient, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAttachmentsByPatientRow
	for rows.Next() {
		var i FindAttachmentsByPatientRow
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.FileType,
			&i.VisitID,
			&i.PatientID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID_2,
			&i.FirstName,
			&i.LastName,
			&i.FatherName,
			&i.Phone,
			&i.NationalCode,
			&i.IdentityCode,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttachment = `-- name: GetAttachment :one
SELECT a.id, file_path, file_type, visit_id, patient_id, a.created_at, a.updated_at, a.deleted_at, v.id, visit_price, visit_date, visit_time, payment_type, is_paid, reception_id, v.created_at, v.updated_at, v.deleted_at FROM attachments AS a JOIN visits AS v on v.id = a.visit_id 
WHERE a.id = ?
`

type GetAttachmentRow struct {
	ID          int64
	FilePath    sql.NullString
	FileType    sql.NullString
	VisitID     sql.NullInt64
	PatientID   sql.NullInt64
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullTime
	ID_2        int64
	VisitPrice  sql.NullInt64
	VisitDate   sql.NullTime
	VisitTime   sql.NullTime
	PaymentType sql.NullString
	IsPaid      sql.NullBool
	ReceptionID int64
	CreatedAt_2 time.Time
	UpdatedAt_2 sql.NullTime
	DeletedAt_2 sql.NullTime
}

func (q *Queries) GetAttachment(ctx context.Context, id int64) (GetAttachmentRow, error) {
	row := q.db.QueryRowContext(ctx, getAttachment, id)
	var i GetAttachmentRow
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.FileType,
		&i.VisitID,
		&i.PatientID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.VisitPrice,
		&i.VisitDate,
		&i.VisitTime,
		&i.PaymentType,
		&i.IsPaid,
		&i.ReceptionID,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const updateAttachment = `-- name: UpdateAttachment :exec
UPDATE attachments SET
    file_path = ?,
    file_type = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateAttachmentParams struct {
	FilePath  sql.NullString
	FileType  sql.NullString
	UpdatedAt sql.NullTime
	ID        int64
}

func (q *Queries) UpdateAttachment(ctx context.Context, arg UpdateAttachmentParams) error {
	_, err := q.db.ExecContext(ctx, updateAttachment,
		arg.FilePath,
		arg.FileType,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
