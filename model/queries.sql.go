// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package model

import (
	"context"
	"database/sql"
)

const getPatient = `-- name: GetPatient :one
SELECT id, first_name, last_name, father_name, phone, national_code, identity_code, created_at, updated_at, deleted_at FROM patients 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPatient(ctx context.Context, id int64) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatient, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FatherName,
		&i.Phone,
		&i.NationalCode,
		&i.IdentityCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePatient = `-- name: UpdatePatient :exec
UPDATE patients SET 
    first_name = ?,
    last_name = ?,
    national_code = ?,
    identity_code = ?,
    father_name = ?,
    phone = ?,
    updated_at = ?
    WHERE id = ?
`

type UpdatePatientParams struct {
	FirstName    sql.NullString
	LastName     sql.NullString
	NationalCode sql.NullString
	IdentityCode sql.NullString
	FatherName   sql.NullString
	Phone        sql.NullString
	UpdatedAt    sql.NullTime
	ID           int64
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) error {
	_, err := q.db.ExecContext(ctx, updatePatient,
		arg.FirstName,
		arg.LastName,
		arg.NationalCode,
		arg.IdentityCode,
		arg.FatherName,
		arg.Phone,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
    user_name = ?,
    password = ?
    WHERE id = ?
`

type UpdateUserParams struct {
	UserName string
	Password sql.NullString
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.UserName, arg.Password, arg.ID)
	return err
}
